{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.2", "generated_at": "2023-11-21T20:40:57.557584Z", "invocation_id": "d09b736d-4df6-4287-92eb-0b384ca6141e", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.064990Z", "completed_at": "2023-11-21T20:40:52.073199Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.075703Z", "completed_at": "2023-11-21T20:40:52.075716Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0401768684387207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"bill_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.041370Z", "completed_at": "2023-11-21T20:40:52.073515Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.076333Z", "completed_at": "2023-11-21T20:40:52.076340Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05634188652038574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"account_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__account_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.061698Z", "completed_at": "2023-11-21T20:40:52.073936Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.076672Z", "completed_at": "2023-11-21T20:40:52.076676Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05957627296447754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"address_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.069949Z", "completed_at": "2023-11-21T20:40:52.074721Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.084899Z", "completed_at": "2023-11-21T20:40:52.084905Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05568695068359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"bill_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.097129Z", "completed_at": "2023-11-21T20:40:52.109814Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.111793Z", "completed_at": "2023-11-21T20:40:52.111799Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018573760986328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"bill_payment_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.100716Z", "completed_at": "2023-11-21T20:40:52.110167Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.112059Z", "completed_at": "2023-11-21T20:40:52.112062Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018271923065185547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"bill_payment_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.104079Z", "completed_at": "2023-11-21T20:40:52.110501Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.112538Z", "completed_at": "2023-11-21T20:40:52.112540Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018652915954589844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"bill_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.106903Z", "completed_at": "2023-11-21T20:40:52.111296Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.113812Z", "completed_at": "2023-11-21T20:40:52.113815Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019188880920410156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"bundle_item_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bundle_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.121874Z", "completed_at": "2023-11-21T20:40:52.130957Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.133296Z", "completed_at": "2023-11-21T20:40:52.133305Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018184900283813477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"credit_memo_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.118715Z", "completed_at": "2023-11-21T20:40:52.131226Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.134166Z", "completed_at": "2023-11-21T20:40:52.134170Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01969003677368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"bundle_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.127709Z", "completed_at": "2023-11-21T20:40:52.132174Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.135012Z", "completed_at": "2023-11-21T20:40:52.135019Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018803834915161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"customer_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.124846Z", "completed_at": "2023-11-21T20:40:52.132592Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.135343Z", "completed_at": "2023-11-21T20:40:52.135346Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020251989364624023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"credit_memo_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.141328Z", "completed_at": "2023-11-21T20:40:52.153756Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.154534Z", "completed_at": "2023-11-21T20:40:52.154540Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01746201515197754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"department_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__department_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.147973Z", "completed_at": "2023-11-21T20:40:52.154802Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.157112Z", "completed_at": "2023-11-21T20:40:52.157117Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018162965774536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"deposit_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.145080Z", "completed_at": "2023-11-21T20:40:52.155079Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.157645Z", "completed_at": "2023-11-21T20:40:52.157649Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01963210105895996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"deposit_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.151063Z", "completed_at": "2023-11-21T20:40:52.156221Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.158768Z", "completed_at": "2023-11-21T20:40:52.158771Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019587039947509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"estimate_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__estimate_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.160924Z", "completed_at": "2023-11-21T20:40:52.166788Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.176569Z", "completed_at": "2023-11-21T20:40:52.176575Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01956033706665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"estimate_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__estimate_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.167324Z", "completed_at": "2023-11-21T20:40:52.176935Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.178974Z", "completed_at": "2023-11-21T20:40:52.178978Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015435934066772461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"invoice_line_bundle_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.170916Z", "completed_at": "2023-11-21T20:40:52.178071Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.180578Z", "completed_at": "2023-11-21T20:40:52.180581Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016238927841186523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"invoice_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.173787Z", "completed_at": "2023-11-21T20:40:52.178384Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.180844Z", "completed_at": "2023-11-21T20:40:52.180847Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015958070755004883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"invoice_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.182569Z", "completed_at": "2023-11-21T20:40:52.190084Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.197843Z", "completed_at": "2023-11-21T20:40:52.197848Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0189359188079834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"invoice_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.187490Z", "completed_at": "2023-11-21T20:40:52.194828Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.198993Z", "completed_at": "2023-11-21T20:40:52.198996Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014822006225585938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"item_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.191208Z", "completed_at": "2023-11-21T20:40:52.199237Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.201749Z", "completed_at": "2023-11-21T20:40:52.201753Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01631784439086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"journal_entry_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.195114Z", "completed_at": "2023-11-21T20:40:52.199800Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.202250Z", "completed_at": "2023-11-21T20:40:52.202254Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019345998764038086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"journal_entry_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.203356Z", "completed_at": "2023-11-21T20:40:52.211320Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.218882Z", "completed_at": "2023-11-21T20:40:52.218887Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018965959548950195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"payment_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.207725Z", "completed_at": "2023-11-21T20:40:52.212102Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.219249Z", "completed_at": "2023-11-21T20:40:52.219253Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018251895904541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"payment_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.215247Z", "completed_at": "2023-11-21T20:40:52.220088Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.222582Z", "completed_at": "2023-11-21T20:40:52.222585Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012859106063842773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"purchase_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.212592Z", "completed_at": "2023-11-21T20:40:52.220343Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.222845Z", "completed_at": "2023-11-21T20:40:52.222849Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01370382308959961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"purchase_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.224818Z", "completed_at": "2023-11-21T20:40:52.232233Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.239256Z", "completed_at": "2023-11-21T20:40:52.239262Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017902851104736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"refund_receipt_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.228547Z", "completed_at": "2023-11-21T20:40:52.232979Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.239655Z", "completed_at": "2023-11-21T20:40:52.239659Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01801013946533203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"refund_receipt_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.233468Z", "completed_at": "2023-11-21T20:40:52.240448Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.242867Z", "completed_at": "2023-11-21T20:40:52.242871Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01272130012512207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"sales_receipt_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.236286Z", "completed_at": "2023-11-21T20:40:52.240687Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.243136Z", "completed_at": "2023-11-21T20:40:52.243139Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012811899185180664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"sales_receipt_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.245281Z", "completed_at": "2023-11-21T20:40:52.253288Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.260012Z", "completed_at": "2023-11-21T20:40:52.260018Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01835799217224121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"transfer_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__transfer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.249695Z", "completed_at": "2023-11-21T20:40:52.254011Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.260386Z", "completed_at": "2023-11-21T20:40:52.260389Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018203020095825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"vendor_credit_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.257280Z", "completed_at": "2023-11-21T20:40:52.261192Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.263538Z", "completed_at": "2023-11-21T20:40:52.263541Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011887073516845703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"vendor_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.254490Z", "completed_at": "2023-11-21T20:40:52.261896Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.264126Z", "completed_at": "2023-11-21T20:40:52.264128Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01306009292602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_02\".\"vendor_credit_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_credit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.265881Z", "completed_at": "2023-11-21T20:40:52.267000Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.270359Z", "completed_at": "2023-11-21T20:40:52.270363Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008244037628173828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.267606Z", "completed_at": "2023-11-21T20:40:52.268537Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.270827Z", "completed_at": "2023-11-21T20:40:52.270830Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010226964950561523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.271827Z", "completed_at": "2023-11-21T20:40:52.273559Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.276903Z", "completed_at": "2023-11-21T20:40:52.276907Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008734941482543945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.274308Z", "completed_at": "2023-11-21T20:40:52.275245Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.277494Z", "completed_at": "2023-11-21T20:40:52.277496Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008754253387451172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.279057Z", "completed_at": "2023-11-21T20:40:52.280050Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.283210Z", "completed_at": "2023-11-21T20:40:52.283214Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00787806510925293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.280573Z", "completed_at": "2023-11-21T20:40:52.281457Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.283718Z", "completed_at": "2023-11-21T20:40:52.283721Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008973836898803711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.284673Z", "completed_at": "2023-11-21T20:40:52.285663Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.289050Z", "completed_at": "2023-11-21T20:40:52.289053Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008049964904785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.286447Z", "completed_at": "2023-11-21T20:40:52.287396Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.289636Z", "completed_at": "2023-11-21T20:40:52.289639Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00814199447631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.291279Z", "completed_at": "2023-11-21T20:40:52.293151Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.296393Z", "completed_at": "2023-11-21T20:40:52.296397Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008773088455200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bundle_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.293714Z", "completed_at": "2023-11-21T20:40:52.294657Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.296857Z", "completed_at": "2023-11-21T20:40:52.296859Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009972095489501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_card_payment_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.297748Z", "completed_at": "2023-11-21T20:40:52.298777Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.302273Z", "completed_at": "2023-11-21T20:40:52.302276Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008060932159423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_memo_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.299624Z", "completed_at": "2023-11-21T20:40:52.300620Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.302872Z", "completed_at": "2023-11-21T20:40:52.302875Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008136987686157227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_memo_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.304499Z", "completed_at": "2023-11-21T20:40:52.305552Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.309960Z", "completed_at": "2023-11-21T20:40:52.309965Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009188175201416016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.306152Z", "completed_at": "2023-11-21T20:40:52.307098Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.310466Z", "completed_at": "2023-11-21T20:40:52.310469Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010303974151611328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.department_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.311397Z", "completed_at": "2023-11-21T20:40:52.312377Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.315905Z", "completed_at": "2023-11-21T20:40:52.315909Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009157180786132812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.deposit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.313150Z", "completed_at": "2023-11-21T20:40:52.314139Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.316507Z", "completed_at": "2023-11-21T20:40:52.316510Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009208202362060547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.deposit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.318150Z", "completed_at": "2023-11-21T20:40:52.319164Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.322356Z", "completed_at": "2023-11-21T20:40:52.322360Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007945060729980469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.estimate_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.319713Z", "completed_at": "2023-11-21T20:40:52.320605Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.322838Z", "completed_at": "2023-11-21T20:40:52.322841Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00912785530090332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.estimate_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.323775Z", "completed_at": "2023-11-21T20:40:52.324793Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.329409Z", "completed_at": "2023-11-21T20:40:52.329413Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009279012680053711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.325653Z", "completed_at": "2023-11-21T20:40:52.327541Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.330044Z", "completed_at": "2023-11-21T20:40:52.330047Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009354114532470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_line_bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.331676Z", "completed_at": "2023-11-21T20:40:52.332767Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.335998Z", "completed_at": "2023-11-21T20:40:52.336002Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008060932159423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.333380Z", "completed_at": "2023-11-21T20:40:52.334299Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.336455Z", "completed_at": "2023-11-21T20:40:52.336458Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009058237075805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.337344Z", "completed_at": "2023-11-21T20:40:52.338309Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.341535Z", "completed_at": "2023-11-21T20:40:52.341538Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0076410770416259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.339045Z", "completed_at": "2023-11-21T20:40:52.339958Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.342112Z", "completed_at": "2023-11-21T20:40:52.342115Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007692098617553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.journal_entry_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.343635Z", "completed_at": "2023-11-21T20:40:52.344594Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.348504Z", "completed_at": "2023-11-21T20:40:52.348508Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008437871932983398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.journal_entry_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.345112Z", "completed_at": "2023-11-21T20:40:52.346794Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.348949Z", "completed_at": "2023-11-21T20:40:52.348952Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009418010711669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.349907Z", "completed_at": "2023-11-21T20:40:52.350756Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.353959Z", "completed_at": "2023-11-21T20:40:52.353962Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007520198822021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.351480Z", "completed_at": "2023-11-21T20:40:52.352336Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.354539Z", "completed_at": "2023-11-21T20:40:52.354542Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007592916488647461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.356077Z", "completed_at": "2023-11-21T20:40:52.357044Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.360068Z", "completed_at": "2023-11-21T20:40:52.360072Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007511138916015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.357567Z", "completed_at": "2023-11-21T20:40:52.358445Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.360520Z", "completed_at": "2023-11-21T20:40:52.360523Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008546113967895508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.361400Z", "completed_at": "2023-11-21T20:40:52.362340Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.366432Z", "completed_at": "2023-11-21T20:40:52.366436Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00842595100402832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.363049Z", "completed_at": "2023-11-21T20:40:52.364754Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.367016Z", "completed_at": "2023-11-21T20:40:52.367019Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008491039276123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.368509Z", "completed_at": "2023-11-21T20:40:52.369454Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.372534Z", "completed_at": "2023-11-21T20:40:52.372538Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007487058639526367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.refund_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.369968Z", "completed_at": "2023-11-21T20:40:52.370867Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.372980Z", "completed_at": "2023-11-21T20:40:52.372982Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008587121963500977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.refund_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.373875Z", "completed_at": "2023-11-21T20:40:52.374849Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.378040Z", "completed_at": "2023-11-21T20:40:52.378043Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007644176483154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.sales_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.375554Z", "completed_at": "2023-11-21T20:40:52.376462Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.378654Z", "completed_at": "2023-11-21T20:40:52.378657Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007694721221923828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.sales_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.380178Z", "completed_at": "2023-11-21T20:40:52.381131Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.385078Z", "completed_at": "2023-11-21T20:40:52.385081Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00852513313293457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.transfer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.381685Z", "completed_at": "2023-11-21T20:40:52.383426Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.385608Z", "completed_at": "2023-11-21T20:40:52.385611Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009580135345458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_credit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.386503Z", "completed_at": "2023-11-21T20:40:52.387454Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.390596Z", "completed_at": "2023-11-21T20:40:52.390599Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007562160491943359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_credit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.388158Z", "completed_at": "2023-11-21T20:40:52.389032Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.391169Z", "completed_at": "2023-11-21T20:40:52.391171Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007653951644897461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.410995Z", "completed_at": "2023-11-21T20:40:52.783920Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.789850Z", "completed_at": "2023-11-21T20:40:52.789858Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4172060489654541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.399580Z", "completed_at": "2023-11-21T20:40:52.789527Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.791389Z", "completed_at": "2023-11-21T20:40:52.791392Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.43248915672302246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account", "compiled": true, "compiled_code": "with base as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__account_tmp\"\n\n),\n\naccount as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    account_sub_type\n    \n as \n    \n    account_sub_type\n    \n, \n    \n    \n    account_type\n    \n as \n    \n    account_type\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_sub_accounts\n    \n as \n    \n    balance_with_sub_accounts\n    \n, \n    \n    \n    classification\n    \n as \n    \n    classification\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    sub_account\n    \n as \n    \n    sub_account\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as account_id,\n        cast(account_number as TEXT) as account_number,\n        sub_account as is_sub_account,\n        cast(parent_account_id as TEXT) as parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        classification,\n        balance,\n        balance_with_sub_accounts,\n        active as is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n    from account\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.406964Z", "completed_at": "2023-11-21T20:40:52.790123Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.791896Z", "completed_at": "2023-11-21T20:40:52.791899Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.41886210441589355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__address_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_sub_division_code\n    \n as \n    \n    country_sub_division_code\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    line_1\n    \n as \n    \n    line_1\n    \n, \n    \n    \n    line_2\n    \n as \n    \n    line_2\n    \n, \n    \n    \n    line_3\n    \n as \n    \n    line_3\n    \n, \n    \n    \n    line_4\n    \n as \n    \n    line_4\n    \n, \n    \n    \n    line_5\n    \n as \n    \n    line_5\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as address_id,\n        city,\n        country,\n        line_1 as address_1,\n        line_2 as address_2,\n        postal_code,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.392694Z", "completed_at": "2023-11-21T20:40:52.790674Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:52.792395Z", "completed_at": "2023-11-21T20:40:52.792398Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.43428778648376465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        item_expense_billable_status,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.827942Z", "completed_at": "2023-11-21T20:40:53.186346Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:53.187540Z", "completed_at": "2023-11-21T20:40:53.187548Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.39385390281677246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_credit_card_id\n    \n as \n    \n    bill_payment_credit_card_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    linked_bill_payment_id\n    \n as \n    \n    linked_bill_payment_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        index,\n        amount,\n        cast(bill_id as TEXT) as bill_id,\n        deposit_id,\n        expense_id,\n        journal_entry_id,\n        linked_bill_payment_id,\n        vendor_credit_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.837237Z", "completed_at": "2023-11-21T20:40:53.188327Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:53.190171Z", "completed_at": "2023-11-21T20:40:53.190174Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.39325594902038574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n \nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date_at, \n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        exchange_rate,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        total_amount,\n        cast(vendor_id as TEXT) as vendor_id,\n        private_note,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.841882Z", "completed_at": "2023-11-21T20:40:53.187879Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:53.189631Z", "completed_at": "2023-11-21T20:40:53.189635Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3931150436401367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bundle_item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    item_quantity\n    \n as \n    \n    item_quantity\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bundle_id as TEXT) as bundle_id,\n        cast(item_id as TEXT) as item_id,\n        item_quantity,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bundle_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:52.832905Z", "completed_at": "2023-11-21T20:40:53.187263Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:53.189082Z", "completed_at": "2023-11-21T20:40:53.189085Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3944981098175049, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    check_bank_account_id\n    \n as \n    \n    check_bank_account_id\n    \n, \n    \n    \n    check_print_status\n    \n as \n    \n    check_print_status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_account_id\n    \n as \n    \n    credit_card_account_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    pay_type\n    \n as \n    \n    pay_type\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_bill_payment\n    \n as \n    \n    process_bill_payment\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_payment_id,\n        cast(check_bank_account_id as TEXT) as check_bank_account_id,\n        check_print_status,\n        cast(credit_card_account_id as TEXT) as credit_card_account_id,\n        exchange_rate,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        pay_type,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:53.224542Z", "completed_at": "2023-11-21T20:40:53.596730Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:53.598301Z", "completed_at": "2023-11-21T20:40:53.598308Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.40576934814453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(credit_memo_id as TEXT) as credit_memo_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:53.233434Z", "completed_at": "2023-11-21T20:40:53.598052Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:53.599893Z", "completed_at": "2023-11-21T20:40:53.599896Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4055781364440918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__customer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone_number\n    \n as \n    \n    alternate_phone_number\n    \n, \n    \n    \n    ar_account_id\n    \n as \n    \n    ar_account_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_jobs\n    \n as \n    \n    balance_with_jobs\n    \n, \n    \n    \n    bill_address_id\n    \n as \n    \n    bill_address_id\n    \n, \n    \n    \n    bill_with_parent\n    \n as \n    \n    bill_with_parent\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    default_tax_code_id\n    \n as \n    \n    default_tax_code_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    job\n    \n as \n    \n    job\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_number\n    \n as \n    \n    mobile_number\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    open_balance_date\n    \n as \n    \n    open_balance_date\n    \n, \n    \n    \n    parent_customer_id\n    \n as \n    \n    parent_customer_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    preferred_delivery_method\n    \n as \n    \n    preferred_delivery_method\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    resale_number\n    \n as \n    \n    resale_number\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_exemption_reason_id\n    \n as \n    \n    tax_exemption_reason_id\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as customer_id,\n        active as is_active,\n        balance,\n        balance_with_jobs,\n        bill_with_parent,\n        company_name,\n        fully_qualified_name,\n        currency_id,\n        display_name,\n        website,\n        taxable,\n        source_relation\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:53.237560Z", "completed_at": "2023-11-21T20:40:53.597023Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:53.598762Z", "completed_at": "2023-11-21T20:40:53.598765Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.40615105628967285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remaining_credit\n    \n as \n    \n    remaining_credit\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as credit_memo_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(class_id as TEXT) as class_id,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:53.229709Z", "completed_at": "2023-11-21T20:40:53.597604Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:53.599440Z", "completed_at": "2023-11-21T20:40:53.599442Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.40830397605895996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    print_grouped_items\n    \n as \n    \n    print_grouped_items\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bundle_id,\n        created_at,\n        active as is_active,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n\n    from fields\n)\n\nselect * from final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:53.638062Z", "completed_at": "2023-11-21T20:40:53.949136Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:53.958331Z", "completed_at": "2023-11-21T20:40:53.958338Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.35523295402526855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    cash_back_account_id\n    \n as \n    \n    cash_back_account_id\n    \n, \n    \n    \n    cash_back_amount\n    \n as \n    \n    cash_back_amount\n    \n, \n    \n    \n    cash_back_memo\n    \n as \n    \n    cash_back_memo\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as deposit_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:53.647432Z", "completed_at": "2023-11-21T20:40:53.958898Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:53.960448Z", "completed_at": "2023-11-21T20:40:53.960452Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.35629796981811523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__estimate_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        description,\n        discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_item_id,\n        sales_item_quantity,\n        item_id,\n        quantity,\n        account_id,\n        amount,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__estimate_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:53.632780Z", "completed_at": "2023-11-21T20:40:53.949459Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:53.958654Z", "completed_at": "2023-11-21T20:40:53.958658Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3642160892486572, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__department_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_department_id\n    \n as \n    \n    parent_department_id\n    \n, \n    \n    \n    sub_department\n    \n as \n    \n    sub_department\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as department_id,\n        active as is_active,\n        created_at,\n        updated_at,\n        fully_qualified_name,\n        name,\n        sub_department as is_sub_department,\n        parent_department_id,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__department\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:53.642485Z", "completed_at": "2023-11-21T20:40:53.958067Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:53.960099Z", "completed_at": "2023-11-21T20:40:53.960102Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.363278865814209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    deposit_account_id\n    \n as \n    \n    deposit_account_id\n    \n, \n    \n    \n    deposit_check_number\n    \n as \n    \n    deposit_check_number\n    \n, \n    \n    \n    deposit_class_id\n    \n as \n    \n    deposit_class_id\n    \n, \n    \n    \n    deposit_customer_id\n    \n as \n    \n    deposit_customer_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    deposit_payment_method_id\n    \n as \n    \n    deposit_payment_method_id\n    \n, \n    \n    \n    deposit_tax_applicable_on\n    \n as \n    \n    deposit_tax_applicable_on\n    \n, \n    \n    \n    deposit_tax_code_id\n    \n as \n    \n    deposit_tax_code_id\n    \n, \n    \n    \n    deposit_transaction_type\n    \n as \n    \n    deposit_transaction_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n, \n    \n    \n    refund_receipt_id\n    \n as \n    \n    refund_receipt_id\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(deposit_id as TEXT) as deposit_id,\n        index,\n        amount,\n        description,\n        cast(deposit_account_id as TEXT) as deposit_account_id,\n        cast(deposit_class_id as TEXT) as deposit_class_id,\n        cast(deposit_customer_id as TEXT) as deposit_customer_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:53.987869Z", "completed_at": "2023-11-21T20:40:54.265430Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:54.265971Z", "completed_at": "2023-11-21T20:40:54.265977Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3120908737182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__estimate_tmp\"\n\n),\n \nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepted_by\n    \n as \n    \n    accepted_by\n    \n, \n    \n    \n    accepted_date\n    \n as \n    \n    accepted_date\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    expiration_date\n    \n as \n    \n    expiration_date\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as estimate_id,\n        cast(class_id as TEXT) as class_id,\n        created_at,\n        currency_id,\n        customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__estimate\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:54.002576Z", "completed_at": "2023-11-21T20:40:54.332961Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:54.334397Z", "completed_at": "2023-11-21T20:40:54.334400Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.36448073387145996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_line_tmp\"\n\n),\n\nfields as ( \n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        detail_type,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        quantity,\n        bundle_quantity,\n        cast(bundle_id as TEXT) as bundle_id,\n        cast(account_id as TEXT) as account_id,\n        cast(item_id as TEXT) as item_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:54.007746Z", "completed_at": "2023-11-21T20:40:54.312671Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:54.332686Z", "completed_at": "2023-11-21T20:40:54.332693Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3650639057159424, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    charge_credit_id\n    \n as \n    \n    charge_credit_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    reimburse_charge_id\n    \n as \n    \n    reimburse_charge_id\n    \n, \n    \n    \n    statement_charge_id\n    \n as \n    \n    statement_charge_id\n    \n, \n    \n    \n    time_activity_id\n    \n as \n    \n    time_activity_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        cast(payment_id as TEXT) as payment_id,\n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:53.997645Z", "completed_at": "2023-11-21T20:40:54.333361Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:54.334666Z", "completed_at": "2023-11-21T20:40:54.334670Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.37308311462402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_amount\n    \n as \n    \n    discount_amount\n    \n, \n    \n    \n    discount_rate\n    \n as \n    \n    discount_rate\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_line_index\n    \n as \n    \n    invoice_line_index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    line_num\n    \n as \n    \n    line_num\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    service_date\n    \n as \n    \n    service_date\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        cast(class_id as TEXT) as class_id,\n        description,\n        amount,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(item_id as TEXT) as item_id,\n        quantity,\n        sales_item_quantity,\n        cast(account_id as TEXT) as account_id,\n        unit_price,\n        invoice_line_index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:54.301060Z", "completed_at": "2023-11-21T20:40:54.623754Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:54.624269Z", "completed_at": "2023-11-21T20:40:54.624275Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.356691837310791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allow_ipnpayment\n    \n as \n    \n    allow_ipnpayment\n    \n, \n    \n    \n    allow_online_achpayment\n    \n as \n    \n    allow_online_achpayment\n    \n, \n    \n    \n    allow_online_credit_card_payment\n    \n as \n    \n    allow_online_credit_card_payment\n    \n, \n    \n    \n    allow_online_payment\n    \n as \n    \n    allow_online_payment\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    billing_bcc_email\n    \n as \n    \n    billing_bcc_email\n    \n, \n    \n    \n    billing_cc_email\n    \n as \n    \n    billing_cc_email\n    \n, \n    \n    \n    billing_email\n    \n as \n    \n    billing_email\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    custom_sales_rep\n    \n as \n    \n    custom_sales_rep\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit\n    \n as \n    \n    deposit\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as invoice_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        shipping_address_id,\n        delivery_type,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        cast(class_id as TEXT) as class_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:54.375559Z", "completed_at": "2023-11-21T20:40:54.735754Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:54.737333Z", "completed_at": "2023-11-21T20:40:54.737337Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3899061679840088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    adjustment\n    \n as \n    \n    adjustment\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as journal_entry_id,\n        adjustment as is_adjustment,\n        created_at,\n        currency_id,\n        cast(doc_number as TEXT) as doc_number,\n        exchange_rate,\n        private_note,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:54.369490Z", "completed_at": "2023-11-21T20:40:54.735222Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:54.737071Z", "completed_at": "2023-11-21T20:40:54.737074Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3983170986175537, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    billable_status\n    \n as \n    \n    billable_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    posting_type\n    \n as \n    \n    posting_type\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_applicable_on\n    \n as \n    \n    tax_applicable_on\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(journal_entry_id as TEXT) as journal_entry_id,\n        index,\n        cast(account_id as TEXT) as account_id,\n        amount,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        description,\n        billable_status,\n        posting_type,\n        cast(vendor_id as TEXT) as vendor_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:54.363065Z", "completed_at": "2023-11-21T20:40:54.734935Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:54.736801Z", "completed_at": "2023-11-21T20:40:54.736807Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.40566515922546387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    asset_account_id\n    \n as \n    \n    asset_account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    \n    \n    inventory_start_date\n    \n as \n    \n    inventory_start_date\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_item_id\n    \n as \n    \n    parent_item_id\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    purchase_description\n    \n as \n    \n    purchase_description\n    \n, \n    \n    \n    purchase_tax_code_id\n    \n as \n    \n    purchase_tax_code_id\n    \n, \n    \n    \n    purchase_tax_included\n    \n as \n    \n    purchase_tax_included\n    \n, \n    \n    \n    quantity_on_hand\n    \n as \n    \n    quantity_on_hand\n    \n, \n    \n    \n    sales_tax_code_id\n    \n as \n    \n    sales_tax_code_id\n    \n, \n    \n    \n    sales_tax_included\n    \n as \n    \n    sales_tax_included\n    \n, \n    \n    \n    stock_keeping_unit\n    \n as \n    \n    stock_keeping_unit\n    \n, \n    \n    \n    sub_item\n    \n as \n    \n    sub_item\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    track_quantity_on_hand\n    \n as \n    \n    track_quantity_on_hand\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as item_id,\n        active as is_active,\n        created_at,\n        cast(income_account_id as TEXT) as income_account_id,\n        cast(asset_account_id as TEXT) as asset_account_id,\n        cast(expense_account_id as TEXT) as expense_account_id,\n        name,\n        purchase_cost,\n        taxable,\n        type,\n        unit_price,\n        inventory_start_date,\n        cast(parent_item_id as TEXT) as parent_item_id,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:54.658072Z", "completed_at": "2023-11-21T20:40:55.003719Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.004269Z", "completed_at": "2023-11-21T20:40:55.004276Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3746371269226074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(payment_id as TEXT) as payment_id,\n        index,\n        amount,\n        journal_entry_id,\n        deposit_id,\n        cast(invoice_id as TEXT) as invoice_id,\n        credit_memo_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:54.774610Z", "completed_at": "2023-11-21T20:40:55.107399Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.107957Z", "completed_at": "2023-11-21T20:40:55.107964Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3786931037902832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remit_to_address_id\n    \n as \n    \n    remit_to_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n     \n    select \n        cast(id as TEXT) as purchase_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        exchange_rate,\n        credit,\n        total_amount,\n        payment_type,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        cast(vendor_id as TEXT) as vendor_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:54.767618Z", "completed_at": "2023-11-21T20:40:55.150834Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.152626Z", "completed_at": "2023-11-21T20:40:55.152629Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.41542506217956543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_payment\n    \n as \n    \n    process_payment\n    \n, \n    \n    \n    receivable_account_id\n    \n as \n    \n    receivable_account_id\n    \n, \n    \n    \n    reference_number\n    \n as \n    \n    reference_number\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    unapplied_amount\n    \n as \n    \n    unapplied_amount\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as payment_id,\n        unapplied_amount,\n        total_amount,\n        currency_id,\n        cast(receivable_account_id as TEXT) as receivable_account_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:54.779860Z", "completed_at": "2023-11-21T20:40:55.150518Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.152281Z", "completed_at": "2023-11-21T20:40:55.152285Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4074368476867676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_id as TEXT) as purchase_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id, \n        account_expense_billable_status,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.033500Z", "completed_at": "2023-11-21T20:40:55.348310Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.348863Z", "completed_at": "2023-11-21T20:40:55.348870Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3452610969543457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(refund_id as TEXT) as refund_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id, \n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        sales_item_tax_code_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.153962Z", "completed_at": "2023-11-21T20:40:55.464067Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.464574Z", "completed_at": "2023-11-21T20:40:55.464581Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3616781234741211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    check_payment_account_number\n    \n as \n    \n    check_payment_account_number\n    \n, \n    \n    \n    check_payment_bank_name\n    \n as \n    \n    check_payment_bank_name\n    \n, \n    \n    \n    check_payment_check_number\n    \n as \n    \n    check_payment_check_number\n    \n, \n    \n    \n    check_payment_name_on_account\n    \n as \n    \n    check_payment_name_on_account\n    \n, \n    \n    \n    check_payment_status\n    \n as \n    \n    check_payment_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as refund_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(class_id as TEXT) as class_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.183552Z", "completed_at": "2023-11-21T20:40:55.514062Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.515927Z", "completed_at": "2023-11-21T20:40:55.515931Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3621077537536621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(sales_receipt_id as TEXT) as sales_receipt_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_tax_code_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.188600Z", "completed_at": "2023-11-21T20:40:55.515191Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.517044Z", "completed_at": "2023-11-21T20:40:55.517047Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3692617416381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as sales_receipt_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.379794Z", "completed_at": "2023-11-21T20:40:55.658523Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.659086Z", "completed_at": "2023-11-21T20:40:55.659092Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.30550193786621094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__transfer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    from_account_id\n    \n as \n    \n    from_account_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    to_account_id\n    \n as \n    \n    to_account_id\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as transfer_id,\n        amount,\n        cast(from_account_id as TEXT) as from_account_id,\n        cast(to_account_id as TEXT) as to_account_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__transfer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.685849Z", "completed_at": "2023-11-21T20:40:55.688337Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.688877Z", "completed_at": "2023-11-21T20:40:55.688881Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004040956497192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__account_classifications", "compiled": true, "compiled_code": "with accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__account\"\n),\n\nclassification_fix as (\n\n    select \n        account_id,\n        source_relation,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.account_id = adjusted_balances.parent_account_id\n        and parent_accounts.source_relation = adjusted_balances.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__account_classifications\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.690538Z", "completed_at": "2023-11-21T20:40:55.699013Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.699629Z", "completed_at": "2023-11-21T20:40:55.699636Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010281801223754883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue.127506f73f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        classification as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__account\"\n    group by classification\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Asset','Equity','Expense','Liability','Revenue'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.701826Z", "completed_at": "2023-11-21T20:40:55.708419Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.708968Z", "completed_at": "2023-11-21T20:40:55.708975Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008339881896972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation.864a4b056a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__account\"\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.710600Z", "completed_at": "2023-11-21T20:40:55.715936Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.716464Z", "completed_at": "2023-11-21T20:40:55.716469Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006899833679199219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__account_account_id.9944488b9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__account\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.718133Z", "completed_at": "2023-11-21T20:40:55.720916Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.721412Z", "completed_at": "2023-11-21T20:40:55.721417Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004334926605224609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id.35f96199bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.723010Z", "completed_at": "2023-11-21T20:40:55.726894Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.727388Z", "completed_at": "2023-11-21T20:40:55.727392Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00536799430847168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation.5bc813a014", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__address\"\n    group by address_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.728974Z", "completed_at": "2023-11-21T20:40:55.731671Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.732166Z", "completed_at": "2023-11-21T20:40:55.732170Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004176139831542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__address_address_id.4f100ae50c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__address\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.733770Z", "completed_at": "2023-11-21T20:40:55.737129Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.737635Z", "completed_at": "2023-11-21T20:40:55.737639Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004899024963378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation.73722b1062", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_line\"\n    group by bill_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.739169Z", "completed_at": "2023-11-21T20:40:55.742060Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.742529Z", "completed_at": "2023-11-21T20:40:55.742533Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00432896614074707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id.25c5ea7348", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_line\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.744082Z", "completed_at": "2023-11-21T20:40:55.747155Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.747666Z", "completed_at": "2023-11-21T20:40:55.747671Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004538059234619141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation.0a7e17967c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\"\n    group by bill_payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.749182Z", "completed_at": "2023-11-21T20:40:55.751890Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.752372Z", "completed_at": "2023-11-21T20:40:55.752376Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004129886627197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id.1dbb366150", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.753897Z", "completed_at": "2023-11-21T20:40:55.758299Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.758814Z", "completed_at": "2023-11-21T20:40:55.758820Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005921125411987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation.8c08249abf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill\"\n    group by bill_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.760363Z", "completed_at": "2023-11-21T20:40:55.763672Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.764168Z", "completed_at": "2023-11-21T20:40:55.764173Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004781246185302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id.ca717958c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.765716Z", "completed_at": "2023-11-21T20:40:55.768472Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.768966Z", "completed_at": "2023-11-21T20:40:55.768970Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004216909408569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id.6d547b8c07", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bundle_item\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.770546Z", "completed_at": "2023-11-21T20:40:55.775255Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.775763Z", "completed_at": "2023-11-21T20:40:55.775768Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006235837936401367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_join", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill\"\n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_line\"\n),\n\nbills_linked as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn\"\n),\n\nbill_payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment\"\n),\n\nbill_payment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\"\n\n    where bill_id is not null\n),\n\nbill_pay as (\n\n    select\n        bills.bill_id,\n        bills.source_relation,\n        bills_linked.bill_payment_id\n    from bills\n\n    left join bills_linked\n        on bills.bill_id = bills_linked.bill_id\n        and bills.source_relation = bills_linked.source_relation\n\n    where bills_linked.bill_payment_id is not null\n),\n\nbill_link as (\n\n    select\n        bills.*,\n        bill_pay.bill_payment_id\n    from bills\n\n    left join bill_pay\n        on bills.bill_id = bill_pay.bill_id\n        and bills.source_relation = bill_pay.source_relation\n),\n\nfinal as (\n\n    select\n        cast('bill' as TEXT)  as transaction_type,\n        bill_link.bill_id as transaction_id,\n        bill_link.source_relation,\n        bill_link.doc_number,\n        bill_link.department_id,\n        bill_link.vendor_id as vendor_id,\n        bill_link.payable_account_id,\n        bill_link.total_amount as total_amount,\n        bill_link.balance as current_balance,\n        bill_link.due_date_at as due_date,\n        min(bill_payments.transaction_date) as initial_payment_date,\n        max(bill_payments.transaction_date) as recent_payment_date,\n        sum(coalesce(bill_payment_lines.amount, 0)) as total_current_payment\n\n    from bill_link\n\n    left join bill_payments\n        on bill_link.bill_payment_id = bill_payments.bill_payment_id\n        and bill_link.source_relation = bill_payments.source_relation\n\n    left join bill_payment_lines\n        on bill_payments.bill_payment_id = bill_payment_lines.bill_payment_id\n        and bill_payments.source_relation = bill_payment_lines.source_relation\n        and bill_link.bill_id = bill_payment_lines.bill_id\n    \n    group by 1,2,3,4,5,6,7,8,9,10 \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__bill_join\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.777331Z", "completed_at": "2023-11-21T20:40:55.780788Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.781296Z", "completed_at": "2023-11-21T20:40:55.781301Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004950761795043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_payment_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to accounts payable and a credit record to the specified cash account.\n*/\n\n--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith bill_payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment\"\n),\n\nbill_payment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__account\"\n),\n\nap_accounts as (\n\n    select\n        account_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Payable'\n        and is_active\n        and not is_sub_account\n),\n\nbill_payment_join as (\n\n    select\n        bill_payments.bill_payment_id as transaction_id,\n        bill_payments.source_relation,\n        row_number() over(partition by bill_payments.bill_payment_id, bill_payments.source_relation \n            order by bill_payments.source_relation, bill_payments.transaction_date) - 1 as index,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.vendor_id,\n        bill_payments.department_id\n    from bill_payments\n\n    left join ap_accounts\n        on ap_accounts.source_relation = bill_payments.source_relation\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        vendor_id,\n        amount,\n        payment_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        department_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        vendor_id,\n        amount,\n        account_id,\n        cast(null as TEXT) as class_id,\n        department_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__bill_payment_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.782887Z", "completed_at": "2023-11-21T20:40:55.786595Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.787099Z", "completed_at": "2023-11-21T20:40:55.787104Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005455970764160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation.4b7aafd630", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment\"\n    group by bill_payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.802784Z", "completed_at": "2023-11-21T20:40:55.806651Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.807187Z", "completed_at": "2023-11-21T20:40:55.807190Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01874518394470215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id.908899ccfb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_payment\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.808796Z", "completed_at": "2023-11-21T20:40:55.824384Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.825318Z", "completed_at": "2023-11-21T20:40:55.825325Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018038034439086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation.7a43f0e186", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\"\n    group by credit_memo_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.545713Z", "completed_at": "2023-11-21T20:40:55.805634Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.806139Z", "completed_at": "2023-11-21T20:40:55.806144Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2925262451171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone\n    \n as \n    \n    alternate_phone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_phone\n    \n as \n    \n    mobile_phone\n    \n, \n    \n    \n    other_contacts\n    \n as \n    \n    other_contacts\n    \n, \n    \n    \n    primary_phone\n    \n as \n    \n    primary_phone\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_identifier\n    \n as \n    \n    tax_identifier\n    \n, \n    \n    \n    term_id\n    \n as \n    \n    term_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_1099\n    \n as \n    \n    vendor_1099\n    \n, \n    \n    \n    web_url\n    \n as \n    \n    web_url\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_id,\n        account_number,\n        active as is_active,\n        balance,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        company_name,\n        created_at,\n        currency_id,\n        display_name,\n        web_url,\n        vendor_1099 as is_vendor_1099,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.839097Z", "completed_at": "2023-11-21T20:40:55.846179Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.846818Z", "completed_at": "2023-11-21T20:40:55.846822Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01045989990234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation.61cc22a568", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__customer\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.843527Z", "completed_at": "2023-11-21T20:40:55.847063Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.848384Z", "completed_at": "2023-11-21T20:40:55.848388Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006897926330566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id.58953be02b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.849982Z", "completed_at": "2023-11-21T20:40:55.857000Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.857824Z", "completed_at": "2023-11-21T20:40:55.857830Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009858846664428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id.98232a9723", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__customer\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.853481Z", "completed_at": "2023-11-21T20:40:55.857573Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.858825Z", "completed_at": "2023-11-21T20:40:55.858828Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0067179203033447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation.917f24c5ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo\"\n    group by credit_memo_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.517820Z", "completed_at": "2023-11-21T20:40:55.825065Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.826579Z", "completed_at": "2023-11-21T20:40:55.826583Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.35139918327331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(vendor_credit_id as TEXT) as vendor_credit_id,\n        index,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_quantity,\n        item_expense_unit_price,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        item_expense_billable_status,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.861082Z", "completed_at": "2023-11-21T20:40:55.867372Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.868982Z", "completed_at": "2023-11-21T20:40:55.868986Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010191917419433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id.d921d2b152", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.864098Z", "completed_at": "2023-11-21T20:40:55.868648Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.870571Z", "completed_at": "2023-11-21T20:40:55.870575Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01358485221862793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation.e241a21ebc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bundle_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bundle\"\n    group by bundle_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.553326Z", "completed_at": "2023-11-21T20:40:55.837991Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.842654Z", "completed_at": "2023-11-21T20:40:55.842660Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3227839469909668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_credit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_credit_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        exchange_rate,\n        created_at,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        cast(department_id as TEXT) as department_id,\n        private_note,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_credit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.871110Z", "completed_at": "2023-11-21T20:40:55.876123Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.881103Z", "completed_at": "2023-11-21T20:40:55.881108Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015398979187011719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id.382e1dad60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bundle\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.877131Z", "completed_at": "2023-11-21T20:40:55.883977Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.889840Z", "completed_at": "2023-11-21T20:40:55.889845Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01630711555480957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation.5574d8e908", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit\"\n    group by deposit_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.881395Z", "completed_at": "2023-11-21T20:40:55.889547Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.891775Z", "completed_at": "2023-11-21T20:40:55.891779Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01894402503967285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id.880b8c37b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.885277Z", "completed_at": "2023-11-21T20:40:55.891280Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.895995Z", "completed_at": "2023-11-21T20:40:55.895998Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016358137130737305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation.cc61ab0953", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__estimate_line\"\n    group by estimate_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.892537Z", "completed_at": "2023-11-21T20:40:55.897336Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.902257Z", "completed_at": "2023-11-21T20:40:55.902261Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015965938568115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id.c060f99b4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__estimate_line\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.897957Z", "completed_at": "2023-11-21T20:40:55.905437Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.910173Z", "completed_at": "2023-11-21T20:40:55.910178Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01565074920654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__deposit_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified cash account and a credit record to either undeposited funds or a\nspecific other account indicated in the deposit line.\n*/\n\n--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit\"\n),\n\ndeposit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__account\"\n),\n\nuf_accounts as (\n\n    select\n        account_id,\n        source_relation\n    from accounts\n\n    where account_sub_type = 'UndepositedFunds'\n        and is_active\n        and not is_sub_account\n),\n\ndeposit_join as (\n\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.source_relation,\n        deposit_lines.index,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.deposit_account_id, uf_accounts.account_id) as deposit_from_acct_id,\n        deposit_customer_id as customer_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id\n\n    from deposits\n\n    inner join deposit_lines\n        on deposits.deposit_id = deposit_lines.deposit_id\n        and deposits.source_relation = deposit_lines.source_relation\n\n    left join uf_accounts\n        on uf_accounts.source_relation = deposits.source_relation\n\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__deposit_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.902549Z", "completed_at": "2023-11-21T20:40:55.909596Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.911878Z", "completed_at": "2023-11-21T20:40:55.911882Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015446662902832031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__deposit_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n     \n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit\"\n), \n\ndeposit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit_line\"\n),\n\nfinal as (\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.source_relation,\n        deposit_lines.index as transaction_line_id,\n        cast(null as TEXT) as doc_number,\n        'deposit' as transaction_type,\n        deposits.transaction_date,\n        deposit_lines.deposit_account_id as account_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id,\n        deposit_lines.deposit_customer_id as customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        deposit_lines.description,\n        deposit_lines.amount,\n        deposits.total_amount\n    from deposits\n    \n    inner join deposit_lines \n        on deposits.deposit_id = deposit_lines.deposit_id\n        and deposits.source_relation = deposit_lines.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__deposit_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.906751Z", "completed_at": "2023-11-21T20:40:55.911617Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.961891Z", "completed_at": "2023-11-21T20:40:55.961898Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06116604804992676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation.443de63985", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit_line\"\n    group by deposit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.913367Z", "completed_at": "2023-11-21T20:40:55.966874Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.971688Z", "completed_at": "2023-11-21T20:40:55.971694Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.061968088150024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id.d615f463e1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__deposit_line\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.963847Z", "completed_at": "2023-11-21T20:40:55.971391Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.976400Z", "completed_at": "2023-11-21T20:40:55.976405Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01596689224243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation.412260b882", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__estimate\"\n    group by estimate_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.968554Z", "completed_at": "2023-11-21T20:40:55.976118Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.978140Z", "completed_at": "2023-11-21T20:40:55.978143Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015932798385620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id.0331d3c310", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__estimate\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.973045Z", "completed_at": "2023-11-21T20:40:55.978379Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.983541Z", "completed_at": "2023-11-21T20:40:55.983545Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016573190689086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation.99b74bc327", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_line\"\n    group by invoice_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.980305Z", "completed_at": "2023-11-21T20:40:55.988683Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.993729Z", "completed_at": "2023-11-21T20:40:55.993735Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017007112503051758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id.0424087a8f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_line\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.985064Z", "completed_at": "2023-11-21T20:40:55.993458Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.998181Z", "completed_at": "2023-11-21T20:40:55.998186Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019347190856933594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id.c9b9c8f8f4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.989938Z", "completed_at": "2023-11-21T20:40:55.995100Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:55.999979Z", "completed_at": "2023-11-21T20:40:55.999983Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01707315444946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation.5370e9fcd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, invoice_line_index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle\"\n    group by invoice_id, index, invoice_line_index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:55.995405Z", "completed_at": "2023-11-21T20:40:56.000243Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.005363Z", "completed_at": "2023-11-21T20:40:56.005368Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013402938842773438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id.cfd59b83a9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.002182Z", "completed_at": "2023-11-21T20:40:56.006830Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.013529Z", "completed_at": "2023-11-21T20:40:56.013534Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014913082122802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation.ef51800044", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice\"\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.007076Z", "completed_at": "2023-11-21T20:40:56.013791Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.019054Z", "completed_at": "2023-11-21T20:40:56.019059Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018496036529541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id.b6d8e1ad7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.010603Z", "completed_at": "2023-11-21T20:40:56.014813Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.019868Z", "completed_at": "2023-11-21T20:40:56.019872Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015354156494140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id.39198c4ff2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.015306Z", "completed_at": "2023-11-21T20:40:56.020602Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.025388Z", "completed_at": "2023-11-21T20:40:56.025392Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01359701156616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__journal_entry_double_entry", "compiled": true, "compiled_code": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\n\n--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry\"\n),\n\njournal_entry_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\n),\n\nfinal as (\n\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.source_relation,\n        journal_entry_lines.index,\n        journal_entries.transaction_date,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        journal_entry_lines.account_id,\n        class_id,\n        journal_entry_lines.department_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n        and journal_entries.source_relation = journal_entry_lines.source_relation\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__journal_entry_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.022108Z", "completed_at": "2023-11-21T20:40:56.026335Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.034129Z", "completed_at": "2023-11-21T20:40:56.034134Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015610694885253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__journal_entry_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry\"\n),\n\njournal_entry_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\n),\n\nfinal as (\n\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.source_relation,\n        journal_entry_lines.index as transaction_line_id,\n        journal_entries.doc_number,\n        'journal_entry' as transaction_type,\n        journal_entries.transaction_date,\n        journal_entry_lines.account_id,\n        journal_entry_lines.class_id,\n        journal_entry_lines.department_id,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        cast(billable_status as TEXT) as billable_status,\n        journal_entry_lines.description,\n        case when lower(journal_entry_lines.posting_type) = 'credit'\n            then journal_entry_lines.amount * -1 \n            else journal_entry_lines.amount \n                end as amount,\n        journal_entries.total_amount\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n        and journal_entries.source_relation = journal_entry_lines.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__journal_entry_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.027311Z", "completed_at": "2023-11-21T20:40:56.035373Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.040196Z", "completed_at": "2023-11-21T20:40:56.040201Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01617598533630371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.ab661907c3", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        posting_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\n    group by posting_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Credit','Debit'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.031140Z", "completed_at": "2023-11-21T20:40:56.035923Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.040501Z", "completed_at": "2023-11-21T20:40:56.040505Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016176939010620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation.0cd1d9f232", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        journal_entry_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\n    group by journal_entry_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.036726Z", "completed_at": "2023-11-21T20:40:56.041509Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.046954Z", "completed_at": "2023-11-21T20:40:56.046959Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013818979263305664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id.bd89a6f784", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.042229Z", "completed_at": "2023-11-21T20:40:56.047216Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.051703Z", "completed_at": "2023-11-21T20:40:56.051708Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015924930572509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified expense account and credit record to accounts payable for each bill transaction.\n*/\n\n--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill\"\n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.expense_account_id as parent_expense_account_id,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nbill_join as (\n    select\n        bills.bill_id as transaction_id,\n        bills.source_relation,\n        bill_lines.index,\n        bills.transaction_date,\n        bill_lines.amount,\n        coalesce(bill_lines.account_expense_account_id,items.asset_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        coalesce(bill_lines.item_expense_class_id, bill_lines.account_expense_class_id) as class_id,\n        bills.vendor_id,\n        bills.department_id\n    from bills\n\n    inner join bill_lines\n        on bills.bill_id = bill_lines.bill_id\n        and bills.source_relation = bill_lines.source_relation\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n        and bill_lines.source_relation = items.source_relation\n),\n\nfinal as (\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        payable_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__bill_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.049057Z", "completed_at": "2023-11-21T20:40:56.056160Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.061070Z", "completed_at": "2023-11-21T20:40:56.061075Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015542030334472656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill\" \n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bill_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        bills.bill_id as transaction_id,\n        bills.source_relation,\n        bill_lines.index as transaction_line_id,\n        bills.doc_number,\n        'bill' as transaction_type,\n        bills.transaction_date,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        bill_lines.account_expense_class_id as class_id,\n        bills.department_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.vendor_id,\n        coalesce(bill_lines.account_expense_billable_status, bill_lines.item_expense_billable_status) as billable_status,\n        coalesce(bill_lines.description, items.name) as description,\n        bill_lines.amount,\n        bills.total_amount\n    from bills\n\n    inner join bill_lines \n        on bills.bill_id = bill_lines.bill_id\n        and bills.source_relation = bill_lines.source_relation\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n        and bill_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__bill_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.051989Z", "completed_at": "2023-11-21T20:40:56.056970Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.061653Z", "completed_at": "2023-11-21T20:40:56.061656Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019782066345214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__credit_memo_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to Discounts Refunds Given and a credit record to the specified income account.\n*/\n\n--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo\"\n),\n\ncredit_memo_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__account\"\n),\n\ndf_accounts as (\n\n    select\n        account_id as account_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\ncredit_memo_join as (\n\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.source_relation,\n        credit_memo_lines.index,\n        credit_memos.transaction_date,\n        credit_memo_lines.amount,\n        coalesce(credit_memo_lines.sales_item_account_id, items.income_account_id, items.expense_account_id) as account_id,\n        credit_memos.customer_id,\n        coalesce(credit_memo_lines.sales_item_class_id, credit_memo_lines.discount_class_id, credit_memos.class_id) as class_id,\n        credit_memos.department_id\n\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n        and credit_memos.source_relation = credit_memo_lines.source_relation\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n        and credit_memo_lines.source_relation = items.source_relation\n\n    where coalesce(credit_memo_lines.discount_account_id, credit_memo_lines.sales_item_account_id, credit_memo_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        credit_memo_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount * -1 as amount,\n        account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    union all\n\n    select\n        transaction_id,\n        credit_memo_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount * -1 as amount,\n        df_accounts.account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    left join df_accounts\n        on df_accounts.source_relation = credit_memo_join.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__credit_memo_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.057453Z", "completed_at": "2023-11-21T20:40:56.062409Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.068886Z", "completed_at": "2023-11-21T20:40:56.068890Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014956951141357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__credit_memo_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo\"\n),\n\ncredit_memo_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.source_relation,\n        credit_memo_lines.index as transaction_line_id,\n        credit_memos.doc_number,\n        'credit_memo' as transaction_type,\n        credit_memos.transaction_date,\n        credit_memo_lines.sales_item_item_id as item_id,\n        credit_memo_lines.sales_item_quantity as item_quantity,\n        credit_memo_lines.sales_item_unit_price as item_unit_price,\n        case when credit_memo_lines.sales_item_account_id is null\n            then coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) \n            else credit_memo_lines.sales_item_account_id\n                end as account_id,\n        credit_memos.class_id,\n        credit_memos.department_id,\n        credit_memos.customer_id, \n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        credit_memo_lines.description,\n        credit_memo_lines.amount * -1 as amount,\n        credit_memos.total_amount * -1 as total_amount\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n        and credit_memos.source_relation = credit_memo_lines.source_relation\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n        and credit_memo_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__credit_memo_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.062650Z", "completed_at": "2023-11-21T20:40:56.069136Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.074895Z", "completed_at": "2023-11-21T20:40:56.074900Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01832413673400879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to accounts receivable and a credit record to a specified revenue account indicated on the invoice line.\n*/\n\n--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_lines as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_line\"\n),\n\nitems as (\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\naccounts as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__account\"\n),\n\n\n\n\ninvoice_bundles as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle\"\n),\n\nbundles as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bundle\"\n),\n\nbundle_items as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__bundle_item\"\n),\n\nincome_accounts as (\n\n    select *\n    from accounts\n\n    where account_sub_type = 'SalesOfProductIncome'\n),\n\nbundle_income_accounts as (\n\n    select distinct\n        coalesce(parent.income_account_id, income_accounts.account_id) as account_id,\n        coalesce(parent.source_relation, income_accounts.source_relation) as source_relation,\n        bundle_items.bundle_id\n\n    from items\n\n    left join items as parent\n        on items.parent_item_id = parent.item_id\n        and items.source_relation = parent.source_relation\n\n    inner join income_accounts\n        on income_accounts.account_id = items.income_account_id\n        and income_accounts.source_relation = items.source_relation\n\n    inner join bundle_items\n        on bundle_items.item_id = items.item_id\n        and bundle_items.source_relation = items.source_relation\n),\n\n\nar_accounts as (\n\n    select \n        account_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n),\n\ninvoice_join as (\n\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.source_relation,\n        invoice_lines.index,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount\n            else invoices.total_amount\n                end as amount,\n\n        \n        case when invoice_lines.detail_type is not null then invoice_lines.detail_type\n            when coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id) is not null then 'SalesItemLineDetail'\n            when invoice_lines.discount_account_id is not null then 'DiscountLineDetail'\n            when coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.discount_account_id) is null then 'NoAccountMapping'\n        end as invoice_line_transaction_type,\n        coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.discount_account_id) as account_id,\n        \n\n        coalesce(invoice_lines.sales_item_class_id, invoice_lines.discount_class_id, invoices.class_id) as class_id,\n\n        invoices.customer_id,\n        invoices.department_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n        and invoices.source_relation = invoice_lines.source_relation\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n        and invoice_lines.source_relation = items.source_relation\n\n    \n    left join bundle_income_accounts\n        on bundle_income_accounts.bundle_id = invoice_lines.bundle_id\n        and bundle_income_accounts.source_relation = invoice_lines.source_relation\n    \n),\n\ninvoice_filter as (\n\n    select *\n    from invoice_join\n    where invoice_line_transaction_type not in ('SubTotalLineDetail','NoAccountMapping')\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        invoice_filter.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        account_id,\n        class_id,\n        department_id,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'debit'\n            else 'credit' \n        end as transaction_type,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'invoice discount'\n            else 'invoice'\n        end as transaction_source\n    from invoice_filter\n\n    union all\n\n    select\n        transaction_id,\n        invoice_filter.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        ar_accounts.account_id,\n        class_id,\n        department_id,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'credit'\n            else 'debit' \n        end as transaction_type,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'invoice discount'\n            else 'invoice'\n        end as transaction_source\n    from invoice_filter\n\n    left join ar_accounts\n        on ar_accounts.source_relation = invoice_filter.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__invoice_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.070915Z", "completed_at": "2023-11-21T20:40:56.079172Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.083686Z", "completed_at": "2023-11-21T20:40:56.083690Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01616382598876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.source_relation,\n        invoice_lines.index as transaction_line_id,\n        invoices.doc_number,\n        'invoice' as transaction_type,\n        invoices.transaction_date,\n        coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) as item_id,\n        coalesce(invoice_lines.quantity, invoice_lines.sales_item_quantity) as item_quantity,\n        invoice_lines.sales_item_unit_price as item_unit_price,\n        case when invoice_lines.account_id is null\n            then coalesce(items.income_account_id, items.expense_account_id, items.asset_account_id)\n            else invoice_lines.account_id\n                end as account_id,\n        coalesce(invoice_lines.discount_class_id, invoice_lines.sales_item_class_id) as class_id,\n        invoices.department_id,\n        invoices.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        invoice_lines.description,\n        invoice_lines.amount,\n        invoices.total_amount\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n        and invoices.source_relation = invoice_lines.source_relation\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n        and invoice_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__invoice_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.075175Z", "completed_at": "2023-11-21T20:40:56.079912Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.084249Z", "completed_at": "2023-11-21T20:40:56.084253Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018932104110717773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation.169465a2a6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        item_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\"\n    group by item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.080414Z", "completed_at": "2023-11-21T20:40:56.084964Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.089932Z", "completed_at": "2023-11-21T20:40:56.089936Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012998819351196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__item_item_id.da906d8fb9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.085217Z", "completed_at": "2023-11-21T20:40:56.090171Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.095066Z", "completed_at": "2023-11-21T20:40:56.095071Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017201900482177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation.25be3cf2e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment_line\"\n    group by payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.092050Z", "completed_at": "2023-11-21T20:40:56.100615Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.105520Z", "completed_at": "2023-11-21T20:40:56.105525Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016922712326049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id.6351e3fe26", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment_line\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.095363Z", "completed_at": "2023-11-21T20:40:56.101405Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.106066Z", "completed_at": "2023-11-21T20:40:56.106070Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019399166107177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard.7de7edf458", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase\"\n    group by payment_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Cash','Check','CreditCard'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.101906Z", "completed_at": "2023-11-21T20:40:56.106780Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.111489Z", "completed_at": "2023-11-21T20:40:56.111495Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01310110092163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation.172340b49e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase\"\n    group by purchase_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.107050Z", "completed_at": "2023-11-21T20:40:56.111767Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.117999Z", "completed_at": "2023-11-21T20:40:56.118003Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01768207550048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id.fc2090959b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.113569Z", "completed_at": "2023-11-21T20:40:56.122956Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.127202Z", "completed_at": "2023-11-21T20:40:56.127207Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017320871353149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_join", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_linked as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn\"\n),\n\n\nestimates as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__estimate\"\n),\n\n\npayments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment\"\n),\n\npayment_lines_payment as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment_line\"\n\n    where invoice_id is not null\n),\n\ninvoice_est as (\n\n    select\n        invoices.invoice_id,\n        invoice_linked.estimate_id\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n\n    where invoice_linked.estimate_id is not null\n),\n\ninvoice_pay as (\n\n    select\n        invoices.invoice_id,\n        invoice_linked.payment_id\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n\n    where invoice_linked.payment_id is not null\n),\n\ninvoice_link as (\n\n    select\n        invoices.*,\n        invoice_est.estimate_id,\n        invoice_pay.payment_id\n    from invoices\n\n    left join invoice_est\n        on invoices.invoice_id = invoice_est.invoice_id\n\n    left join invoice_pay\n        on invoices.invoice_id = invoice_pay.invoice_id\n),\n\nfinal as (\n\n    select\n        cast('invoice' as TEXT) as transaction_type,\n        invoice_link.invoice_id as transaction_id,\n        invoice_link.source_relation,\n        invoice_link.doc_number,\n        invoice_link.estimate_id,\n        invoice_link.department_id,\n        invoice_link.customer_id as customer_id,\n        invoice_link.billing_address_id,\n        invoice_link.shipping_address_id,\n        invoice_link.delivery_type,\n        invoice_link.total_amount as total_amount,\n        invoice_link.balance as current_balance,\n\n        \n        coalesce(estimates.total_amount, 0) as estimate_total_amount,\n        estimates.transaction_status as estimate_status,\n\n        \n\n        invoice_link.due_date as due_date,\n        min(payments.transaction_date) as initial_payment_date,\n        max(payments.transaction_date) as recent_payment_date,\n        sum(coalesce(payment_lines_payment.amount, 0)) as total_current_payment\n\n    from invoice_link\n\n    \n    left join estimates\n        on invoice_link.estimate_id = estimates.estimate_id\n        and invoice_link.source_relation = estimates.source_relation\n    \n\n    left join payments\n        on invoice_link.payment_id = payments.payment_id\n        and invoice_link.source_relation = payments.source_relation\n\n    left join payment_lines_payment\n        on payments.payment_id = payment_lines_payment.payment_id\n        and invoice_link.invoice_id = payment_lines_payment.invoice_id\n        and invoice_link.source_relation = payment_lines_payment.source_relation\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__invoice_join\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.118280Z", "completed_at": "2023-11-21T20:40:56.123748Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.127757Z", "completed_at": "2023-11-21T20:40:56.127761Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02005600929260254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__payment_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to either undeposited funds or a specified cash account and a credit record to accounts receivable.\n*/\n\n--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment\"\n),\n\npayment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__account\"\n),\n\nar_accounts as (\n\n    select\n        account_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\npayment_join as (\n\n    select\n        payments.payment_id as transaction_id,\n        payments.source_relation,\n        row_number() over(partition by payments.payment_id, payments.source_relation \n            order by payments.source_relation, payments.transaction_date) - 1 as index,\n        payments.transaction_date,\n        payments.total_amount as amount,\n        payments.deposit_to_account_id,\n        payments.receivable_account_id,\n        payments.customer_id\n    from payments\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        payment_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    union all\n\n    select\n        transaction_id,\n        payment_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.account_id) as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    left join ar_accounts\n        on ar_accounts.source_relation = payment_join.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__payment_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.124253Z", "completed_at": "2023-11-21T20:40:56.128015Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.133347Z", "completed_at": "2023-11-21T20:40:56.133351Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012790918350219727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__purchase_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to a specified expense account and a credit record to the payment account.\n*/\nwith purchases as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase\"\n),\n\npurchase_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.expense_account_id as parent_expense_account_id\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\npurchase_join as (\n\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.source_relation,\n        purchase_lines.index,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.customer_id,\n        coalesce(purchase_lines.item_expense_class_id, purchase_lines.account_expense_class_id) as class_id,\n        purchases.vendor_id,\n        purchases.department_id\n    from purchases\n\n    inner join purchase_lines\n        on purchases.purchase_id = purchase_lines.purchase_id\n        and purchases.source_relation = purchase_lines.source_relation\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n        and purchase_lines.source_relation = items.source_relation\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        payed_from_account_id as account_id,\n        class_id,\n        department_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        class_id,\n        department_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__purchase_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.128736Z", "completed_at": "2023-11-21T20:40:56.134004Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.138905Z", "completed_at": "2023-11-21T20:40:56.138909Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0159149169921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__purchase_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_purchase variable within your dbt_project.yml file to False.\n\n\nwith purchases as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase\"\n),\n\nitems as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\"\n),\n\npurchase_lines as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase_line\"\n),\n\nfinal as (\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.source_relation,\n        purchase_lines.index as transaction_line_id,\n        purchases.doc_number,\n        'purchase' as transaction_type,\n        purchases.transaction_date,\n        coalesce(purchase_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        purchase_lines.account_expense_class_id as class_id,\n        purchases.department_id,\n        coalesce(purchases.customer_id, account_expense_customer_id, item_expense_customer_id) as customer_id,\n        purchases.vendor_id,\n        coalesce(purchase_lines.account_expense_billable_status, purchase_lines.item_expense_billable_status) as billable_status,\n        purchase_lines.description,\n        case when coalesce(purchases.credit, false)\n            then -1 * purchase_lines.amount\n            else purchase_lines.amount\n        end as amount,\n        case when coalesce(purchases.credit, false) \n            then -1 * purchases.total_amount\n            else purchases.total_amount\n        end as total_amount\n    from purchases\n\n    inner join purchase_lines \n        on purchases.purchase_id = purchase_lines.purchase_id\n        and purchases.source_relation = purchase_lines.source_relation\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n        and purchase_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__purchase_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.136091Z", "completed_at": "2023-11-21T20:40:56.143074Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.147485Z", "completed_at": "2023-11-21T20:40:56.147490Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015003204345703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation.1998a8282e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment\"\n    group by payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.139188Z", "completed_at": "2023-11-21T20:40:56.143631Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.147991Z", "completed_at": "2023-11-21T20:40:56.147994Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01764202117919922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation.a23c661eb5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase_line\"\n    group by purchase_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.143899Z", "completed_at": "2023-11-21T20:40:56.148235Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.153126Z", "completed_at": "2023-11-21T20:40:56.153130Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012668848037719727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id.ca2c1ef54f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__payment\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.148950Z", "completed_at": "2023-11-21T20:40:56.153404Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.155831Z", "completed_at": "2023-11-21T20:40:56.155834Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016391277313232422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id.5406fca79c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__purchase_line\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.160051Z", "completed_at": "2023-11-21T20:40:56.164239Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.169063Z", "completed_at": "2023-11-21T20:40:56.169068Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018857955932617188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id.57df809b80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.156099Z", "completed_at": "2023-11-21T20:40:56.164529Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.169335Z", "completed_at": "2023-11-21T20:40:56.169339Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0197601318359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation.614411eb40", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\"\n    group by refund_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.164793Z", "completed_at": "2023-11-21T20:40:56.169588Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.174922Z", "completed_at": "2023-11-21T20:40:56.174926Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013681173324584961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__refund_receipt_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified asset account and a credit record the specified cash account.\n*/\n\n--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt\"\n),\n\nrefund_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nrefund_receipt_join as (\n\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.source_relation,\n        refund_receipt_lines.index,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.amount,\n        refund_receipts.deposit_to_account_id as credit_to_account_id,\n        coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as debit_account_id,\n        refund_receipts.customer_id,\n        coalesce(refund_receipt_lines.sales_item_class_id, refund_receipt_lines.discount_class_id, refund_receipts.class_id) as class_id,\n        refund_receipts.department_id\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n        and refund_receipts.source_relation = refund_receipt_lines.source_relation\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n\n    where coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, refund_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        credit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        debit_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__refund_receipt_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.169842Z", "completed_at": "2023-11-21T20:40:56.174644Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.177136Z", "completed_at": "2023-11-21T20:40:56.177139Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016296863555908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__refund_receipt_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt\"\n),\n\nrefund_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.source_relation,\n        refund_receipt_lines.index as transaction_line_id,\n        refund_receipts.doc_number,\n        'refund_receipt' as transaction_type,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.sales_item_item_id as item_id,\n        refund_receipt_lines.sales_item_quantity as item_quantity,\n        refund_receipt_lines.sales_item_unit_price as item_unit_price,\n        case when refund_receipt_lines.sales_item_account_id is null\n            then coalesce(items.asset_account_id, items.income_account_id, items.expense_account_id) \n            else refund_receipt_lines.sales_item_account_id\n                end as account_id,\n        refund_receipts.class_id,\n        refund_receipts.department_id,\n        refund_receipts.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        refund_receipt_lines.description,\n        refund_receipt_lines.amount * -1 as amount,\n        refund_receipts.total_amount * -1 as total_amount\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n        and refund_receipts.source_relation = refund_receipt_lines.source_relation\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n        and refund_receipt_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__refund_receipt_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.177660Z", "completed_at": "2023-11-21T20:40:56.185430Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.190487Z", "completed_at": "2023-11-21T20:40:56.190493Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018691062927246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation.60f976841d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt\"\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.180565Z", "completed_at": "2023-11-21T20:40:56.185923Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.190814Z", "completed_at": "2023-11-21T20:40:56.190817Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019058942794799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id.29e8a8216e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__refund_receipt\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.186848Z", "completed_at": "2023-11-21T20:40:56.194213Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.196503Z", "completed_at": "2023-11-21T20:40:56.196507Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013260126113891602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation.20e80dcbd5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\"\n    group by sales_receipt_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.191085Z", "completed_at": "2023-11-21T20:40:56.195850Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.198326Z", "completed_at": "2023-11-21T20:40:56.198330Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01868891716003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.9be0667fc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.198594Z", "completed_at": "2023-11-21T20:40:56.206070Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.211620Z", "completed_at": "2023-11-21T20:40:56.211626Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018948078155517578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_receipt_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified cash account and a credit record to the specified asset account.\n*/\n\n--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt\"\n),\n\nsales_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n),\n\nsales_receipt_join as (\n\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.source_relation,\n        sales_receipt_lines.index,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.amount,\n        sales_receipts.deposit_to_account_id as debit_to_account_id,\n        coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as credit_to_account_id,\n        sales_receipts.customer_id,\n        coalesce(sales_receipt_lines.sales_item_class_id, sales_receipt_lines.discount_class_id, sales_receipts.class_id) as class_id,\n        sales_receipts.department_id\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id\n        and sales_receipts.source_relation = sales_receipt_lines.source_relation\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n        and sales_receipt_lines.source_relation = items.source_relation\n\n    where coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, sales_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        debit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        credit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__sales_receipt_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.201933Z", "completed_at": "2023-11-21T20:40:56.206963Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.214590Z", "completed_at": "2023-11-21T20:40:56.214595Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01909494400024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_receipt_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt\"\n),\n\nsales_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.source_relation,\n        sales_receipt_lines.index as transaction_line_id,\n        sales_receipts.doc_number,\n        'sales_receipt' as transaction_type,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.sales_item_item_id as item_id,\n        sales_receipt_lines.sales_item_quantity as item_quantity,\n        sales_receipt_lines.sales_item_unit_price as item_unit_price,\n        coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) as account_id,\n        sales_receipts.class_id,\n        sales_receipts.department_id,\n        sales_receipts.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        sales_receipt_lines.description,\n        sales_receipt_lines.amount,\n        sales_receipts.total_amount\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id   \n        and sales_receipts.source_relation = sales_receipt_lines.source_relation\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n        and sales_receipt_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__sales_receipt_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.207491Z", "completed_at": "2023-11-21T20:40:56.215415Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.217939Z", "completed_at": "2023-11-21T20:40:56.217943Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013931035995483398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation.36bdbcffde", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt\"\n    group by sales_receipt_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.211944Z", "completed_at": "2023-11-21T20:40:56.216471Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.218819Z", "completed_at": "2023-11-21T20:40:56.218823Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01746201515197754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id.b97c1a238a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__sales_receipt\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.219783Z", "completed_at": "2023-11-21T20:40:56.228309Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.232830Z", "completed_at": "2023-11-21T20:40:56.232836Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01927661895751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__transfer_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the receiveing account and a credit record to the sending account.\n*/\n\n--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith transfers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__transfer\"\n),\n\ntransfer_body as (\n\n    select\n        transfer_id as transaction_id,\n        source_relation,\n        row_number() over(partition by transfer_id, source_relation \n            order by source_relation, transaction_date) - 1 as index,\n        transaction_date,\n        amount,\n        from_account_id as credit_to_account_id,\n        to_account_id as debit_to_account_id\n    from transfers\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        credit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'credit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        debit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'debit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__transfer_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.224652Z", "completed_at": "2023-11-21T20:40:56.229190Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.236118Z", "completed_at": "2023-11-21T20:40:56.236122Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02021002769470215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation.bfa4c7345e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__transfer\"\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.229920Z", "completed_at": "2023-11-21T20:40:56.236949Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.240482Z", "completed_at": "2023-11-21T20:40:56.240486Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013817071914672852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id.c1c80a253c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transfer_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__transfer\"\nwhere transfer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.233107Z", "completed_at": "2023-11-21T20:40:56.239027Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.241364Z", "completed_at": "2023-11-21T20:40:56.241367Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016510963439941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation.4960d9d21a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor\"\n    group by vendor_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.242319Z", "completed_at": "2023-11-21T20:40:56.249360Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.253507Z", "completed_at": "2023-11-21T20:40:56.253512Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016632795333862305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id.f509a77195", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor\"\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.245731Z", "completed_at": "2023-11-21T20:40:56.250438Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.256821Z", "completed_at": "2023-11-21T20:40:56.256824Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017228126525878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation.094b35ac4d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_credit_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line\"\n    group by vendor_credit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.250940Z", "completed_at": "2023-11-21T20:40:56.257163Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.259408Z", "completed_at": "2023-11-21T20:40:56.259412Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0117340087890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__vendor_credit_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to payable account and a credit record to the expense account.\n*/\n\n--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_credit\"\n),\n\nvendor_credit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nvendor_credit_join as (\n\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.source_relation,\n        vendor_credit_lines.index,\n        vendor_credits.transaction_date,\n        vendor_credit_lines.amount,\n        vendor_credits.payable_account_id as debit_to_account_id,\n        coalesce(vendor_credit_lines.account_expense_account_id, items.parent_income_account_id, items.income_account_id, items.expense_account_id) as credit_account_id,\n        coalesce(account_expense_customer_id, item_expense_customer_id) as customer_id,\n        coalesce(item_expense_class_id, account_expense_class_id) as class_id,\n        vendor_credits.vendor_id,\n        vendor_credits.department_id\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n        and vendor_credits.source_relation = vendor_credit_lines.source_relation\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n        and vendor_credit_lines.source_relation = items.source_relation\n),\n\nfinal as (\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        credit_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        debit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__vendor_credit_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.254029Z", "completed_at": "2023-11-21T20:40:56.258510Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.261015Z", "completed_at": "2023-11-21T20:40:56.261018Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01497197151184082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__vendor_credit_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n    \n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_credit\"\n),\n\nvendor_credit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.source_relation,\n        vendor_credit_lines.index as transaction_line_id,\n        vendor_credits.doc_number,\n        'vendor_credit' as transaction_type,\n        vendor_credits.transaction_date,\n        case when vendor_credit_lines.account_expense_account_id is null\n            then items.expense_account_id\n            else vendor_credit_lines.account_expense_account_id\n                end as account_id,\n        coalesce(vendor_credit_lines.account_expense_class_id, vendor_credit_lines.item_expense_class_id) as class_id,\n        vendor_credits.department_id,\n        coalesce(vendor_credit_lines.account_expense_customer_id, vendor_credit_lines.item_expense_customer_id) as customer_id,\n        vendor_credits.vendor_id,\n        coalesce(vendor_credit_lines.account_expense_billable_status, vendor_credit_lines.item_expense_billable_status) as billable_status,\n        vendor_credit_lines.description,\n        vendor_credit_lines.amount * -1 as amount,\n        vendor_credits.total_amount * -1 as total_amount\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n        and vendor_credits.source_relation = vendor_credit_lines.source_relation\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n        and vendor_credit_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__vendor_credit_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.261286Z", "completed_at": "2023-11-21T20:40:56.279569Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.287812Z", "completed_at": "2023-11-21T20:40:56.287819Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030041933059692383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id.1275a5ab5a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_credit_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor_credit\"\nwhere vendor_credit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.265036Z", "completed_at": "2023-11-21T20:40:56.287398Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.302075Z", "completed_at": "2023-11-21T20:40:56.302083Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04971790313720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__ap_ar_enhanced", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith bill_join as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__bill_join\"\n),\n\n\ninvoice_join as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__invoice_join\"\n),\n\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__department\"\n),\n\n\n\naddresses as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__address\"\n),\n\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__customer\"\n),\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor\"\n),\n\nfinal as (\n\n    select\n        bill_join.transaction_type,\n        bill_join.transaction_id,\n        bill_join.source_relation,\n        doc_number,\n        cast(null as TEXT) as estimate_id, \n\n        \n        departments.fully_qualified_name as department_name,\n        \n\n        'vendor' as transaction_with,\n        vendors.display_name as customer_vendor_name,\n        vendors.balance as customer_vendor_balance,\n\n        \n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        \n        \n        vendors.web_url as customer_vendor_website,\n        cast(null as TEXT) as delivery_type,\n        cast(null as TEXT) as estimate_status,\n        bill_join.total_amount,\n        cast(null as numeric(28,6)) as estimate_amount,\n        bill_join.current_balance,\n        bill_join.total_current_payment,\n        bill_join.due_date,\n        case when bill_join.current_balance != 0 and \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     < 0\n            then true\n            else false\n                end as is_overdue,\n        case when bill_join.current_balance != 0 and \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     < 0\n            then \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     * -1\n            else 0\n                end as days_overdue,\n        bill_join.initial_payment_date,\n        bill_join.recent_payment_date\n    from bill_join\n\n    \n    left join departments  \n        on bill_join.department_id = departments.department_id\n        and bill_join.source_relation = departments.source_relation\n    \n\n    left join vendors\n        on bill_join.vendor_id = vendors.vendor_id\n        and bill_join.source_relation = vendors.source_relation\n    \n    \n    left join addresses as billing_address\n        on vendors.billing_address_id = billing_address.address_id\n        and vendors.source_relation = billing_address.source_relation\n    \n    \n    \n    union all\n\n    select \n        invoice_join.transaction_type,\n        invoice_join.transaction_id,\n        invoice_join.source_relation,\n        doc_number,\n        invoice_join.estimate_id,\n\n        \n        departments.fully_qualified_name as department_name,\n        \n\n        'customer' as transaction_with,\n        customers.fully_qualified_name as customer_vendor_name,\n        customers.balance as customer_vendor_current_balance,\n\n        \n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        \n\n        customers.website as customer_vendor_webiste,\n        invoice_join.delivery_type,\n        invoice_join.estimate_status,\n        invoice_join.total_amount as total_amount,\n        invoice_join.estimate_total_amount as estimate_total_amount,\n        invoice_join.current_balance as current_balance,\n        invoice_join.total_current_payment as total_current_payment,\n        invoice_join.due_date,\n        case when invoice_join.current_balance != 0 and \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     < 0\n            then true\n            else false\n                end as is_overdue,\n        case when invoice_join.current_balance != 0 and \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     < 0\n            then \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     * -1\n            else 0\n                end as days_overdue,\n        invoice_join.initial_payment_date,\n        invoice_join.recent_payment_date\n    from invoice_join\n\n    \n    left join departments  \n        on invoice_join.department_id = departments.department_id\n        and invoice_join.source_relation = departments.source_relation\n    \n\n    \n    left join addresses as billing_address\n        on invoice_join.billing_address_id = billing_address.address_id\n        and invoice_join.source_relation = billing_address.source_relation\n    \n\n    left join customers\n        on invoice_join.customer_id = customers.customer_id\n        and invoice_join.source_relation = customers.source_relation\n\n    \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__ap_ar_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.281106Z", "completed_at": "2023-11-21T20:40:56.295442Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.310816Z", "completed_at": "2023-11-21T20:40:56.310820Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0328829288482666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_union", "compiled": true, "compiled_code": "\n\nwith sales_union as (\n\n    \n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__sales_receipt_transactions\"\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__invoice_transactions\"\n\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__refund_receipt_transactions\"\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__credit_memo_transactions\"\n    \n),\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__customer\"\n),\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__department\"\n),\n\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor\"\n),\n\nincome_accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__account_classifications\"\n    where account_type = 'Income'\n),\n\nfinal as (\n\n    select \n        'sales' as transaction_source,\n        sales_union.transaction_id,\n        sales_union.source_relation,\n        sales_union.transaction_line_id,\n        sales_union.doc_number,\n        sales_union.transaction_type,\n        sales_union.transaction_date,\n        sales_union.item_id,\n        sales_union.item_quantity,\n        sales_union.item_unit_price,\n        sales_union.account_id,\n        income_accounts.name as account_name,\n        income_accounts.account_sub_type as account_sub_type,\n        sales_union.class_id,\n        sales_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        sales_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        sales_union.vendor_id,\n        vendors.display_name as vendor_name,\n        sales_union.billable_status,\n        sales_union.description,\n        sales_union.amount,\n        sales_union.total_amount\n    from sales_union\n\n    inner join income_accounts\n        on sales_union.account_id = income_accounts.account_id\n        and sales_union.source_relation = income_accounts.source_relation\n\n    left join customers\n        on customers.customer_id = sales_union.customer_id\n        and customers.source_relation = sales_union.source_relation\n\n    left join vendors\n        on vendors.vendor_id = sales_union.vendor_id\n        and vendors.source_relation = sales_union.source_relation\n\n    \n    left join departments\n        on departments.department_id = sales_union.department_id\n        and departments.source_relation = sales_union.source_relation\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__sales_union\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.312822Z", "completed_at": "2023-11-21T20:40:56.321653Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.322173Z", "completed_at": "2023-11-21T20:40:56.322178Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012143850326538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__expenses_union", "compiled": true, "compiled_code": "with expense_union as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__purchase_transactions\"\n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__bill_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__journal_entry_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__deposit_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__vendor_credit_transactions\"\n    \n),\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__customer\"\n),\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__department\"\n),\n\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_staging\".\"stg_quickbooks__vendor\"\n),\n\nexpense_accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__account_classifications\"\n    where account_type = 'Expense'\n),\n\nfinal as (\n\n    select \n        'expense' as transaction_source,\n        expense_union.transaction_id,\n        expense_union.source_relation,\n        expense_union.transaction_line_id,\n        expense_union.doc_number,\n        expense_union.transaction_type,\n        expense_union.transaction_date,\n        cast(null as TEXT) as item_id,\n        cast(null as numeric(28,6)) as item_quantity,\n        cast(null as numeric(28,6)) as item_unit_price,\n        expense_union.account_id,\n        expense_accounts.name as account_name,\n        expense_accounts.account_sub_type as account_sub_type,\n        expense_union.class_id,\n        expense_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        expense_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        expense_union.vendor_id,\n        vendors.display_name as vendor_name,\n        expense_union.billable_status,\n        expense_union.description,\n        expense_union.amount,\n        expense_union.total_amount\n\n    from expense_union\n\n    inner join expense_accounts\n        on expense_union.account_id = expense_accounts.account_id\n        and expense_union.source_relation = expense_accounts.source_relation\n\n    left join customers\n        on customers.customer_id = expense_union.customer_id\n        and customers.source_relation = expense_union.source_relation\n\n    left join vendors\n        on vendors.vendor_id = expense_union.vendor_id\n        and vendors.source_relation = expense_union.source_relation\n\n    \n    left join departments\n        on departments.department_id = expense_union.department_id\n        and departments.source_relation = expense_union.source_relation\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__expenses_union\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.318548Z", "completed_at": "2023-11-21T20:40:56.323283Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.324422Z", "completed_at": "2023-11-21T20:40:56.324426Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014981985092163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__ap_ar_enhanced_transaction_id__source_relation__estimate_id.804c1f0bcf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation, estimate_id\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__ap_ar_enhanced\"\n    group by transaction_id, source_relation, estimate_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.324707Z", "completed_at": "2023-11-21T20:40:56.327985Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.328495Z", "completed_at": "2023-11-21T20:40:56.328499Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005372762680053711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__expenses_sales_enhanced", "compiled": true, "compiled_code": "with expenses as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__expenses_union\"\n),\n\n\nsales as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__sales_union\"\n),\n\n\nfinal as (\n    \n    select *\n    from expenses\n\n    \n    union all\n\n    select *\n    from sales\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__expenses_sales_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.330130Z", "completed_at": "2023-11-21T20:40:56.333337Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.333835Z", "completed_at": "2023-11-21T20:40:56.333839Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004690885543823242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__expenses_sales_enhanced_transaction_id__source_relation__transaction_line_id__item_id.b57775bacb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation, transaction_line_id, item_id\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__expenses_sales_enhanced\"\n    group by transaction_id, source_relation, transaction_line_id, item_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:56.289172Z", "completed_at": "2023-11-21T20:40:56.996130Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:56.996683Z", "completed_at": "2023-11-21T20:40:56.996690Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7483720779418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__general_ledger", "compiled": true, "compiled_code": "with unioned_models as (\n\n    \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__purchase_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__purchase_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__bill_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__bill_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__credit_memo_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__credit_memo_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__deposit_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__deposit_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__invoice_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__invoice_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__journal_entry_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__journal_entry_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__payment_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__payment_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__refund_receipt_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__refund_receipt_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__sales_receipt_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__sales_receipt_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__transfer_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__transfer_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__vendor_credit_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__vendor_credit_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__bill_payment_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_02_quickbooks_intermediate\".\"int_quickbooks__bill_payment_double_entry\"\n\n            \n        )\n\n        \n),\n\ngl_union as (\n\n    select transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        account_id,\n        class_id,\n        department_id,\n        transaction_type,\n        transaction_source \n    from unioned_models\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__account_classifications\"\n),\n\n\nadjusted_gl as (\n    \n    select\n        md5(cast(coalesce(cast(gl_union.transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.index as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast( gl_union.transaction_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.transaction_source as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) \n            as unique_id,\n        gl_union.transaction_id,\n        gl_union.source_relation,\n        gl_union.index as transaction_index,\n        gl_union.transaction_date,\n        gl_union.customer_id,\n        gl_union.vendor_id,\n        gl_union.amount,\n        gl_union.account_id,\n        gl_union.class_id,\n        gl_union.department_id,\n        accounts.account_number,\n        accounts.name as account_name,\n        accounts.is_sub_account,\n        accounts.parent_account_number,\n        accounts.parent_account_name,\n        accounts.account_type,\n        accounts.account_sub_type,\n        accounts.financial_statement_helper,\n        accounts.balance as account_current_balance,\n        accounts.classification as account_class,\n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.amount\n            else gl_union.amount * -1\n                end as adjusted_amount\n    from gl_union\n\n    left join accounts\n        on gl_union.account_id = accounts.account_id\n        and gl_union.source_relation = accounts.source_relation\n),\n\nfinal as (\n\n    select\n        *,\n        sum(adjusted_amount) over (partition by account_id, class_id, source_relation\n            order by source_relation, transaction_date, account_id, class_id rows unbounded preceding) as running_balance\n    from adjusted_gl\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__general_ledger\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.041026Z", "completed_at": "2023-11-21T20:40:57.047823Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.048386Z", "completed_at": "2023-11-21T20:40:57.048392Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01817607879638672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.not_null_quickbooks__general_ledger_unique_id.06732be667", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__general_ledger\"\nwhere unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.043525Z", "completed_at": "2023-11-21T20:40:57.048657Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.049775Z", "completed_at": "2023-11-21T20:40:57.049778Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018903017044067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.unique_quickbooks__general_ledger_unique_id.df148e7545", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__general_ledger\"\nwhere unique_id is not null\ngroup by unique_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.032318Z", "completed_at": "2023-11-21T20:40:57.449400Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.450105Z", "completed_at": "2023-11-21T20:40:57.450112Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.44962096214294434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__general_ledger_date_spine", "compiled": true, "compiled_code": "-- depends_on: \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__general_ledger\"\n\nwith spine as (\n\n    \n    \n    \n    \n        \n            \n\n        \n\n    \n\n    \n    \n\n    \n\n     \n    \n        \n    \n        \n\n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 59.0\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2019-01-02' as date) + ((interval '1 month') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_month\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_month <= \n\n    cast('2023-11-21' as date) + ((interval '1 month') * (1))\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\ngeneral_ledger as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__general_ledger\"\n),\n\ndate_spine as (\n    select\n        cast(date_trunc('year', date_month) as date) as date_year,\n        cast(date_trunc('month', date_month) as date) as period_first_day,\n        cast(\n        \n\n    \n\n    date_trunc('month', date_month) + ((interval '1 month') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date) as period_last_day,\n        row_number() over (order by cast(date_trunc('month', date_month) as date)) as period_index\n    from spine\n),\n\nfinal as (\n    select distinct\n        general_ledger.account_id,\n        general_ledger.source_relation,\n        general_ledger.account_number,\n        general_ledger.account_name,\n        general_ledger.is_sub_account,\n        general_ledger.parent_account_number,\n        general_ledger.parent_account_name,\n        general_ledger.account_type,\n        general_ledger.account_sub_type,\n        general_ledger.account_class,\n        general_ledger.financial_statement_helper,\n        general_ledger.class_id,\n        date_spine.date_year,\n        date_spine.period_first_day,\n        date_spine.period_last_day,\n        date_spine.period_index\n    from general_ledger\n\n    cross join date_spine\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__general_ledger_date_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.481881Z", "completed_at": "2023-11-21T20:40:57.485620Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.486135Z", "completed_at": "2023-11-21T20:40:57.486140Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0054090023040771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__general_ledger_balances", "compiled": true, "compiled_code": "with general_ledger as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__general_ledger\"\n),\n\ngl_accounting_periods as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__general_ledger_date_spine\"\n),\n\ngl_period_balance as (\n\n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        class_id,\n        cast(date_trunc('year', transaction_date) as date) as date_year,\n        cast(date_trunc('month', transaction_date) as date) as date_month,\n        sum(adjusted_amount) as period_balance\n    from general_ledger\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14\n),\n\ngl_cumulative_balance as (\n\n    select\n        *,\n        case when financial_statement_helper = 'balance_sheet'\n            then sum(period_balance) over (partition by account_id, class_id, source_relation \n            order by source_relation, date_month, account_id, class_id rows unbounded preceding) \n            else 0\n                end as cumulative_balance\n    from gl_period_balance\n),\n\ngl_beginning_balance as (\n\n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        class_id,\n        date_year,\n        date_month, \n        period_balance as period_net_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then (cumulative_balance - period_balance) \n            else 0\n                end as period_beginning_balance,\n        cumulative_balance as period_ending_balance  \n    from gl_cumulative_balance\n),\n\ngl_patch as (\n\n    select \n        coalesce(gl_beginning_balance.account_id, gl_accounting_periods.account_id) as account_id,\n        coalesce(gl_beginning_balance.source_relation, gl_accounting_periods.source_relation) as source_relation,\n        coalesce(gl_beginning_balance.account_number, gl_accounting_periods.account_number) as account_number,\n        coalesce(gl_beginning_balance.account_name, gl_accounting_periods.account_name) as account_name,\n        coalesce(gl_beginning_balance.is_sub_account, gl_accounting_periods.is_sub_account) as is_sub_account,\n        coalesce(gl_beginning_balance.parent_account_number, gl_accounting_periods.parent_account_number) as parent_account_number,\n        coalesce(gl_beginning_balance.parent_account_name, gl_accounting_periods.parent_account_name) as parent_account_name,\n        coalesce(gl_beginning_balance.account_type, gl_accounting_periods.account_type) as account_type,\n        coalesce(gl_beginning_balance.account_sub_type, gl_accounting_periods.account_sub_type) as account_sub_type,\n        coalesce(gl_beginning_balance.account_class, gl_accounting_periods.account_class) as account_class,\n        coalesce(gl_beginning_balance.class_id, gl_accounting_periods.class_id) as class_id,\n        coalesce(gl_beginning_balance.financial_statement_helper, gl_accounting_periods.financial_statement_helper) as financial_statement_helper,\n        coalesce(gl_beginning_balance.date_year, gl_accounting_periods.date_year) as date_year,\n        gl_accounting_periods.period_first_day,\n        gl_accounting_periods.period_last_day,\n        gl_accounting_periods.period_index,\n        gl_beginning_balance.period_net_change,\n        gl_beginning_balance.period_beginning_balance,\n        gl_beginning_balance.period_ending_balance,\n        case when gl_beginning_balance.period_beginning_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_beginning_balance\n                end as period_beginning_balance_starter,\n        case when gl_beginning_balance.period_ending_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_ending_balance\n                end as period_ending_balance_starter\n    from gl_accounting_periods\n\n    left join gl_beginning_balance\n        on gl_beginning_balance.account_id = gl_accounting_periods.account_id\n            and gl_beginning_balance.source_relation = gl_accounting_periods.source_relation\n            and gl_beginning_balance.date_month = gl_accounting_periods.period_first_day\n            and gl_beginning_balance.date_year = gl_accounting_periods.date_year\n            and coalesce(gl_beginning_balance.class_id, '0') = coalesce(gl_accounting_periods.class_id, '0')\n),\n\ngl_value_partition as (\n\n    select\n        *,\n        sum(case when period_ending_balance_starter is null \n            then 0 \n            else 1 \n                end) over (order by source_relation, account_id, class_id, period_last_day rows unbounded preceding) as gl_partition\n    from gl_patch\n),\n \nfinal as (\n    \n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        class_id,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        coalesce(period_net_change,0) as period_net_change,\n        coalesce(period_beginning_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_beginning_balance,\n        coalesce(period_ending_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_ending_balance\n    from gl_value_partition\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__general_ledger_balances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.487824Z", "completed_at": "2023-11-21T20:40:57.494655Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.495214Z", "completed_at": "2023-11-21T20:40:57.495218Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008404970169067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__retained_earnings", "compiled": true, "compiled_code": "with general_ledger_balances as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__general_ledger_balances\"\n),\n\nrevenue_starter as (\n\n    select\n        period_first_day,\n        source_relation,\n        sum(period_net_change) as revenue_net_change\n    from general_ledger_balances\n    \n    where account_class = 'Revenue'\n\n    group by 1,2 \n),\n\nexpense_starter as (\n\n    select \n        period_first_day,\n        source_relation,\n        sum(period_net_change) as expense_net_change \n    from general_ledger_balances\n    \n    where account_class = 'Expense'\n\n    group by 1,2 \n),\n\nnet_income_loss as (\n\n    select *\n    from revenue_starter\n\n    join expense_starter \n        using (period_first_day, source_relation)\n),\n\nretained_earnings_starter as (\n\n    select\n        cast('9999' as TEXT) as account_id,\n        source_relation,\n        cast('9999-00' as TEXT) as account_number,\n        cast('Net Income Adjustment' as TEXT) as account_name,\n        false as is_sub_account,\n        cast(null as TEXT) as parent_account_number,\n        cast(null as TEXT) as parent_account_name,\n        cast('Equity' as TEXT) as account_type,\n        cast('RetainedEarnings' as TEXT) as account_sub_type,\n        cast('Equity' as TEXT) as account_class,\n        cast(null as TEXT) as class_id,\n        cast('balance_sheet' as TEXT) as financial_statement_helper,\n        cast(date_trunc('year', period_first_day) as date) as date_year,\n        cast(period_first_day as date) as period_first_day,\n        cast(\n        \n\n    \n\n    date_trunc('month', period_first_day) + ((interval '1 month') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date) as period_last_day,\n        (revenue_net_change - expense_net_change) as period_net_change\n    from net_income_loss\n),\n\n\nretained_earnings_beginning as (\n\n    select\n        *,\n        sum(coalesce(period_net_change,0)) over (order by source_relation, period_first_day, period_first_day rows unbounded preceding) as period_ending_balance\n    from retained_earnings_starter\n),\n\nfinal as (\n    \n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        class_id,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        period_net_change,\n        lag(coalesce(period_ending_balance,0)) over (order by source_relation, period_first_day) as period_beginning_balance,\n        period_ending_balance\n    from retained_earnings_beginning\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__retained_earnings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.497034Z", "completed_at": "2023-11-21T20:40:57.500283Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.500779Z", "completed_at": "2023-11-21T20:40:57.500784Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004795074462890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__general_ledger_by_period", "compiled": true, "compiled_code": "with general_ledger_balances as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__general_ledger_balances\"\n),\n\nretained_earnings as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__retained_earnings\"\n),\n\n\n\nbalances_earnings_unioned as (\n\n    select *\n    from general_ledger_balances\n\n    union all \n\n    select *\n    from retained_earnings\n), \n\nfinal as (\n\n    select \n        balances_earnings_unioned.*,\n    \n        case \n            when account_class = 'Asset' then 1\n            when account_class = 'Liability' then 2\n            when account_class = 'Equity' then 3\n            when account_class = 'Revenue' then 1\n            when account_class = 'Expense' then 2\n        end as account_ordinal \n    \n    from balances_earnings_unioned\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__general_ledger_by_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.505085Z", "completed_at": "2023-11-21T20:40:57.513174Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.515306Z", "completed_at": "2023-11-21T20:40:57.515312Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013873100280761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.quickbooks.quickbooks__balance_sheet", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__general_ledger_by_period\"\n    where period_first_day <= 'YYYY-MM-DD' --Update to be your desired ending date.\n),\n\nliability_date as (\n    select \n        account_id, \n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Liability'\n\n    group by 1\n),\n\nasset_date as (\n    select \n        account_id, \n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Asset'\n\n    group by 1\n),\n\nequity_date as (\n    select \n        account_id,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period \n\n    where account_class = 'Equity'\n\n    group by 1\n),\n\nliability as (\n    select \n        ld.account_id, \n        l.period_ending_balance\n    from liability_date ld\n\n    left join (select account_id, source_relation, period_first_day, period_ending_balance from general_ledger_by_period where account_class = 'Liability') l\n        on l.account_id = ld.account_id\n            and l.period_first_day = ld.period_first_day\n            and l.source_relation = ld.source_relation\n),\n\nasset as (\n    select ad.account_id, a.period_ending_balance\n    from asset_date ad\n        left join (select account_id, source_relation, period_first_day, period_ending_balance from general_ledger_by_period where account_class = 'Asset') a\n            on a.account_id = ad.account_id\n                and a.period_first_day = ad.period_first_day \n                and a.source_relation = ad.source_relation\n),\n\nequity as (\n    select ed.account_id, e.period_ending_balance\n    from equity_date ed\n        left join (select account_id, source_relation, period_first_day, period_ending_balance from general_ledger_by_period where account_class = 'Equity') e\n            on e.account_id = ed.account_id\n                and e.period_first_day = ed.period_first_day \n                and e.source_relation = ed.source_relation\n)\n\nselect \n    \"liability\" as balance_sheet_type, \n    sum(period_ending_balance) as balance \nfrom liability\n\nunion all\n\nselect \n    \"asset\" as balance_sheet_type, \n    sum(period_ending_balance) as balance \nfrom asset\n\nunion all \n\nselect \n    'equity' as balance_sheet_type, \n    sum(period_ending_balance) as balance \nfrom equity", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.507013Z", "completed_at": "2023-11-21T20:40:57.513436Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.515554Z", "completed_at": "2023-11-21T20:40:57.515558Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014002323150634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.quickbooks.quickbooks__income_statement", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__general_ledger_by_period\"\n),\n\nrevenue as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance \n    from general_ledger_by_period\n\n    where account_class = 'Revenue'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nexpense as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance \n    from general_ledger_by_period\n\n    where account_class = 'Expense'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nrevenue_total as (\n    select \n        'revenue' as income_statement_type, \n        sum(ending_balance) \n    from revenue\n),\n\nexpense_total as (\n    select \n        'expene' as income_statement_type, \n        sum(ending_balance) \n    from expense\n)\n\nselect * \nfrom revenue_total\n\nunion all \n\nselect * \nfrom expense_total", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.508773Z", "completed_at": "2023-11-21T20:40:57.513716Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.515803Z", "completed_at": "2023-11-21T20:40:57.515806Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014095067977905273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__balance_sheet", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__general_ledger_by_period\"\n    where financial_statement_helper = 'balance_sheet'\n),  \n\nfinal as (\n    select\n        period_first_day as calendar_date,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_ending_balance as amount,\n        account_ordinal\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__balance_sheet\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.510389Z", "completed_at": "2023-11-21T20:40:57.514008Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.516052Z", "completed_at": "2023-11-21T20:40:57.516055Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014171123504638672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__profit_and_loss", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__general_ledger_by_period\"\n    where financial_statement_helper = 'income_statement'\n),  \n\nfinal as (\n    select\n        period_first_day as calendar_date,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_net_change as amount,\n        account_ordinal\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__profit_and_loss\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.521714Z", "completed_at": "2023-11-21T20:40:57.535478Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.536935Z", "completed_at": "2023-11-21T20:40:57.536940Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018677949905395508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__general_ledger_by_period_account_id__class_id__source_relation__period_first_day.d928e63a45", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, class_id, source_relation, period_first_day\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__general_ledger_by_period\"\n    group by account_id, class_id, source_relation, period_first_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.529707Z", "completed_at": "2023-11-21T20:40:57.535797Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.537618Z", "completed_at": "2023-11-21T20:40:57.537621Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018928050994873047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__balance_sheet_account_id__source_relation__calendar_date__class_id.07368a5056", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation, calendar_date, class_id\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__balance_sheet\"\n    group by account_id, source_relation, calendar_date, class_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.525140Z", "completed_at": "2023-11-21T20:40:57.536252Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.538365Z", "completed_at": "2023-11-21T20:40:57.538367Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01997685432434082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__cash_flow_classifications", "compiled": true, "compiled_code": "with cash_flow_key as (\n \n   select calendar_date as cash_flow_period,\n       source_relation,\n       account_class,\n       class_id,\n       is_sub_account,\n       parent_account_number,\n       parent_account_name,\n       account_type,\n       account_sub_type,\n       account_number,\n       account_id,\n       account_name,\n       amount as cash_ending_period,\n       md5(cast(coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(calendar_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(class_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_unique_id\n   from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__balance_sheet\"\n),\n \n\n \ncash_flow_types_and_ordinals as (\n\n   select cash_flow_key.*,\n   \n       case when account_type = 'Bank' then 'Cash or Cash Equivalents'\n           when account_type = 'Accounts Receivable' then 'Operating'\n           when account_type = 'Credit Card' then 'Operating'\n           when account_type = 'Other Current Asset' then 'Operating'\n           when account_type = 'Accounts Payable' then 'Operating'\n           when account_type = 'Other Current Liability' then 'Operating'\n           when account_name = 'Net Income Adjustment' then 'Operating'\n           when account_type = 'Fixed Asset' then 'Investing'\n           when account_type = 'Other Asset' then 'Investing'\n           when account_type = 'Long Term Liability' then 'Financing'\n           when account_class = 'Equity' then 'Financing'\n        end as cash_flow_type,\n        case when account_type = 'Bank' then 1\n           when account_type = 'Accounts Receivable' then 2\n           when account_type = 'Credit Card' then 2\n           when account_type = 'Other Current Asset' then 2\n           when account_type = 'Accounts Payable' then 2\n           when account_type = 'Other Current Liability' then 2\n           when account_name = 'Net Income Adjustment' then 2\n           when account_type = 'Fixed Asset' then 3\n           when account_type = 'Other Asset' then 3\n           when account_type = 'Long Term Liability' then 4\n           when account_class = 'Equity' then 4\n        end as cash_flow_ordinal\n    \n\n   from cash_flow_key\n \n   \n)\n\nselect *\nfrom cash_flow_types_and_ordinals", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__cash_flow_classifications\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.532536Z", "completed_at": "2023-11-21T20:40:57.536470Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.538617Z", "completed_at": "2023-11-21T20:40:57.538620Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01994013786315918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__profit_and_loss_account_id__class_id__source_relation__calendar_date.77ccb375e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, class_id, source_relation, calendar_date\n    from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__profit_and_loss\"\n    group by account_id, class_id, source_relation, calendar_date\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.541899Z", "completed_at": "2023-11-21T20:40:57.544960Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.545473Z", "completed_at": "2023-11-21T20:40:57.545478Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004614114761352539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__cash_flow_statement", "compiled": true, "compiled_code": "with cash_flow_classifications as (\n \n   select *\n   from \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"int_quickbooks__cash_flow_classifications\"\n), \n\nfinal as (\n    \n    select cash_flow_classifications.*,\n        coalesce(lag(cash_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period),0) as cash_beginning_period,\n        cash_ending_period - coalesce(lag(cash_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_net_period\n    from cash_flow_classifications\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__cash_flow_statement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.550884Z", "completed_at": "2023-11-21T20:40:57.553606Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.554618Z", "completed_at": "2023-11-21T20:40:57.554623Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00806879997253418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.unique_quickbooks__cash_flow_statement_account_unique_id.c6ce55cc0d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__cash_flow_statement\"\nwhere account_unique_id is not null\ngroup by account_unique_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-21T20:40:57.548111Z", "completed_at": "2023-11-21T20:40:57.553877Z"}, {"name": "execute", "started_at": "2023-11-21T20:40:57.554884Z", "completed_at": "2023-11-21T20:40:57.554887Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008923768997192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.not_null_quickbooks__cash_flow_statement_account_unique_id.748fb9ef0a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_unique_id\nfrom \"postgres\".\"quickbooks_integration_tests_02_quickbooks\".\"quickbooks__cash_flow_statement\"\nwhere account_unique_id is null\n\n\n", "relation_name": null}], "elapsed_time": 6.637468099594116, "args": {"target": "postgres", "partial_parse_file_diff": true, "populate_cache": true, "cache_selected_only": false, "enable_legacy_logger": false, "log_format_file": "debug", "use_colors_file": true, "partial_parse": true, "favor_state": false, "static_parser": true, "log_path": "/Users/joseph.markiewicz/Documents/dbt_packages/quickbooks/dbt_quickbooks/integration_tests/logs", "version_check": true, "defer": false, "macro_debugging": false, "project_dir": "/Users/joseph.markiewicz/Documents/dbt_packages/quickbooks/dbt_quickbooks/integration_tests", "compile": true, "show_resource_report": false, "use_colors": true, "printer_width": 80, "strict_mode": false, "print": true, "profiles_dir": "/Users/joseph.markiewicz/.dbt", "write_json": true, "log_level_file": "debug", "send_anonymous_usage_stats": true, "log_level": "info", "indirect_selection": "eager", "log_file_max_bytes": 10485760, "quiet": false, "warn_error_options": {"include": [], "exclude": []}, "invocation_command": "dbt docs generate -t postgres", "static": false, "select": [], "empty_catalog": false, "introspect": true, "log_format": "default", "which": "generate", "exclude": [], "vars": {}}}